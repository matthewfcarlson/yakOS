; Generated by c86 (BYU-NASM) 5.1 (beta) from app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_app_6:
	DB	"% >",0xD,0xA,0
L_app_5:
	DB	", CPU: ",0
L_app_4:
	DB	"<CS: ",0
L_app_3:
	DB	"Starting Simptris",0xA,0
L_app_2:
	DB	"Determining CPU capacity",0xD,0xA,0
L_app_1:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	20
	; >>>>> { 
	jmp	L_app_7
L_app_8:
	; >>>>> Line:	24
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	25
	; >>>>> printString("Welcome to the Y 
	mov	ax, L_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	26
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	27
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	28
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	29
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	30
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	31
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	32
	; >>>>> printString("Starting Simptris\n"); 
	mov	ax, L_app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> StartSimptris(); 
	call	StartSimptris
	; >>>>> Line:	34
	; >>>>> while (1) 
	jmp	L_app_10
L_app_9:
	; >>>>> Line:	36
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	38
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	39
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	40
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	41
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	43
	; >>>>> printString("<CS: "); 
	mov	ax, L_app_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	45
	; >>>>> printString(", CPU: "); 
	mov	ax, L_app_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> tmp = (int)  
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	47
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> printString("% >\r\n"); 
	mov	ax, L_app_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	50
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	51
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	52
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	53
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_app_10:
	jmp	L_app_9
L_app_11:
	mov	sp, bp
	pop	bp
	ret
L_app_7:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_app_8
	ALIGN	2
main:
	; >>>>> Line:	59
	; >>>>> { 
	jmp	L_app_13
L_app_14:
	; >>>>> Line:	60
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	64
	; >>>>> YKNewTask(STask, (void *) &STaskStk[ 512 ], 0); 
	xor	ax, ax
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	67
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_app_13:
	push	bp
	mov	bp, sp
	jmp	L_app_14
	ALIGN	2
STaskStk:
	TIMES	1024 db 0
