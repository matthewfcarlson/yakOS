        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      ResetISR ; Reset               ; Int 08h (IRQ 0)
        dd      TickISR  ; Tick                ; Int 09h (IRQ 1)
        dd      KeyboardISR ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      SwitchTaskISR           ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84


TickISR:
	cli				;this is atomic so no more interrupts for a bit
	
	
	;TODO: create a function that pushes and pops context in the same way
	push ax
	push bx
	push dx
	push si
	push di
	push bp
	push es
	push ds
	
	mov	ax, word [YKISRDepth]
	test	ax, ax ;Not siure why ax,ax
	jne TickISRSaved
						;save the SP on the TCB since we are call depth zero
	mov si, word [YKCurrentTask]
	mov [si],sp			;move sp (the first variable) to the TCB
	TickISRSaved:
						
	call YKEnterISR		;enter the ISR
	sti 				;turn interupts back on
						;call the tick handler to handle the interrupt
	call YKTickHandler 

	cli 				; Turn off interrupts
						; Reset the PIC before we pop registers
	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)

	call YKExitISR		; exit the ISR	
	
	;Restore registers
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax	
	
	sti 	;return interrupts back on
	iret 	;return from interrupt
	
ResetISR:
	cli
	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)
	mov ax, 3h
	push ax
	call exit
	
KeyboardISR:
	cli
	push ax
	push bx
	push dx
	push si
	push di
	push bp
	push es
	push ds
	
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne KeyboardISRSaved
						;save the SP on the TCB since we are call depth zero
	mov si, word [YKCurrentTask]
	mov [si],sp			;move sp (the first variable) to the TCB
	KeyboardISRSaved:

	call YKEnterISR
	sti
	
	call KeyboardHandler

	cli
	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)
	call YKExitISR
	
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax
	sti
	
	iret

;ISR for the software generated interrupts
SwitchTaskISR:
	cli				;this is atomic so no more interrupts for a bit
	
	;TODO: create a function that pushes and pops context in the same way
	push ax
	push bx
	push dx
	push si
	push di
	push bp
	push es
	push ds
	
	;Save the current SP on the TCB
	mov si, word [YKCurrentTask]
	mov [si],sp			;move sp to the TCB

	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)
	
	;Call the scheduler
	call YKScheduler
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax
	sti
	iret;
	
	
SaveSPtoTCB:	
						;Save the current SP on the TCB
	mov si, word [YKCurrentTask]
	mov ax, sp			;move sp to the ax
	add ax, 2h			;add 4. 2 for the call to EnterISR, 2 for the call to save SPtoTCB
	mov [si], ax		;move the SP to the TCB
	
	ret					;return
	

;This function is callewd by the dispatcher to swtich to the current task
SwitchContext:
	;we put the address we need in a local variable in YKDispatch
	mov sp, [bp-2] ;this is the stack pointer
	
	;This is not neccesary so commented out for performance boost
	;mov bp, sp ;set the basepointer accordingly - we are going to pop it soon
	;add bp, 18 ;for debugging purposes
	
	;next pop all the registers
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax
	
	;This will pop the next three items on the stack: IP, CS, and flags
	iret
	
; Generated by c86 (BYU-NASM) 5.1 (beta) from ISRHandlers.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKTickNum:
	DW	0
L_ISRHandlers_2:
	DB	") IGNORED",0xA,0
L_ISRHandlers_1:
	DB	0xA,"KEYPRESS (",0
	ALIGN	2
KeyboardHandler:
	; >>>>> Line:	15
	; >>>>> void KeyboardHandler(void){ 
	jmp	L_ISRHandlers_3
L_ISRHandlers_4:
	; >>>>> Line:	17
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	19
	; >>>>> if(c == 'a') YKEventSet(charEvent,  0x1 ); 
	cmp	byte [bp-1], 97
	jne	L_ISRHandlers_5
	; >>>>> Line:	19
	; >>>>> if(c == 'a') YKEventSet(charEvent,  0x1 ); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_ISRHandlers_6
L_ISRHandlers_5:
	; >>>>> Line:	20
	; >>>>> else if(c == 'b') YKEventSet(charEvent,  0x2 ); 
	cmp	byte [bp-1], 98
	jne	L_ISRHandlers_7
	; >>>>> Line:	20
	; >>>>> else if(c == 'b') YKEventSet(charEvent,  0x2 ); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_ISRHandlers_8
L_ISRHandlers_7:
	; >>>>> Line:	21
	; >>>>> else if(c == 'c') YKEventSet(charEvent,  0x4 ); 
	cmp	byte [bp-1], 99
	jne	L_ISRHandlers_9
	; >>>>> Line:	21
	; >>>>> else if(c == 'c') YKEventSet(charEvent,  0x4 ); 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_ISRHandlers_10
L_ISRHandlers_9:
	; >>>>> Line:	22
	; >>>>> else if(c == 'd') YKEventSet(charEvent,  0x1  |  0x2  |   
	cmp	byte [bp-1], 100
	jne	L_ISRHandlers_11
	; >>>>> Line:	22
	; >>>>> else if(c == 'd') YKEventSet(charEvent,  0x1  |  0x2  |   
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_ISRHandlers_12
L_ISRHandlers_11:
	; >>>>> Line:	23
	; >>>>> else if(c == '1') YKEventSet(numEvent,  0x1 ); 
	cmp	byte [bp-1], 49
	jne	L_ISRHandlers_13
	; >>>>> Line:	23
	; >>>>> else if(c == '1') YKEventSet(numEvent,  0x1 ); 
	mov	ax, 1
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_ISRHandlers_14
L_ISRHandlers_13:
	; >>>>> Line:	24
	; >>>>> else if(c == 'l') printTaskLists(); 
	cmp	byte [bp-1], 108
	jne	L_ISRHandlers_15
	; >>>>> Line:	24
	; >>>>> else if(c == 'l') printTaskLists(); 
	call	printTaskLists
	jmp	L_ISRHandlers_16
L_ISRHandlers_15:
	; >>>>> Line:	25
	; >>>>> else if(c == 't') YKTickHandler(); 
	cmp	byte [bp-1], 116
	jne	L_ISRHandlers_17
	; >>>>> Line:	25
	; >>>>> else if(c == 't') YKTickHandler(); 
	call	YKTickHandler
	jmp	L_ISRHandlers_18
L_ISRHandlers_17:
	; >>>>> Line:	26
	; >>>>> else if(c == '2') YKEventSet(numEvent,  0x2 ); 
	cmp	byte [bp-1], 50
	jne	L_ISRHandlers_19
	; >>>>> Line:	26
	; >>>>> else if(c == '2') YKEventSet(numEvent,  0x2 ); 
	mov	ax, 2
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_ISRHandlers_20
L_ISRHandlers_19:
	; >>>>> Line:	27
	; >>>>> else if(c == '3') YKEventSet(numEvent,  0x4 ); 
	cmp	byte [bp-1], 51
	jne	L_ISRHandlers_21
	; >>>>> Line:	27
	; >>>>> else if(c == '3') YKEventSet(numEvent,  0x4 ); 
	mov	ax, 4
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_ISRHandlers_22
L_ISRHandlers_21:
	; >>>>> Line:	29
	; >>>>> print("\nKEYPRESS (", 11); 
	mov	ax, 11
	push	ax
	mov	ax, L_ISRHandlers_1
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	30
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> print(") IGNORED\n", 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_ISRHandlers_2
	push	ax
	call	print
	add	sp, 4
L_ISRHandlers_22:
L_ISRHandlers_20:
L_ISRHandlers_18:
L_ISRHandlers_16:
L_ISRHandlers_14:
L_ISRHandlers_12:
L_ISRHandlers_10:
L_ISRHandlers_8:
L_ISRHandlers_6:
	mov	sp, bp
	pop	bp
	ret
L_ISRHandlers_3:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_ISRHandlers_4
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	46
	; >>>>> void YKTickHandler(){ 
	jmp	L_ISRHandlers_24
L_ISRHandlers_25:
	; >>>>> Line:	48
	; >>>>> ++YKTickNum; 
	inc	word [YKTickNum]
	; >>>>> Line:	57
	; >>>>> YKUpdateSuspendedTasks(); 
	call	YKUpdateSuspendedTasks
	mov	sp, bp
	pop	bp
	ret
L_ISRHandlers_24:
	push	bp
	mov	bp, sp
	jmp	L_ISRHandlers_25
; Generated by c86 (BYU-NASM) 5.1 (beta) from YAKkernel.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKSemaphoreIndex:
	DW	0
YKQueueIndex:
	DW	0
YKEventGroupIndex:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	78
	; >>>>> void YKInitialize(){ 
	jmp	L_YAKkernel_1
L_YAKkernel_2:
	; >>>>> Line:	79
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	82
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	83
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	84
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	85
	; >>>>> YKReadyTasks =  0 ; 
	mov	word [YKReadyTasks], 0
	; >>>>> Line:	86
	; >>>>> YKSuspendedTasks =  0 ; 
	mov	word [YKSuspendedTasks], 0
	; >>>>> Line:	88
	; >>>>> YKCurrentTask =  0 ; 
	mov	word [YKCurrentTask], 0
	; >>>>> Line:	89
	; >>>>> YKTCBMallocIndex = 0; 
	mov	word [YKTCBMallocIndex], 0
	; >>>>> Line:	90
	; >>>>> YKIsRunning = 0; 
	mov	word [YKIsRunning], 0
	; >>>>> Line:	93
	; >>>>> YKNewTask(YKIdleTask, &IdleStack[ 100 ],255); 
	mov	ax, 255
	push	ax
	mov	ax, (IdleStack+200)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	94
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_1:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_2
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	98
	; >>>>> void YKEnterMutex(){ 
	jmp	L_YAKkernel_4
L_YAKkernel_5:
	; >>>>> Line:	99
	; >>>>> asm("cli"); 
	cli
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_4:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_5
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	103
	; >>>>> void YKExitMutex(){ 
	jmp	L_YAKkernel_7
L_YAKkernel_8:
	; >>>>> Line:	104
	; >>>>> asm("sti"); 
	sti
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_7:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_8
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	108
	; >>>>> void YKEnterISR(){ 
	jmp	L_YAKkernel_10
L_YAKkernel_11:
	; >>>>> Line:	110
	; >>>>> ++YKISRDepth; 
	inc	word [YKISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_10:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_11
	ALIGN	2
YKExitISR:
	; >>>>> Line:	114
	; >>>>> void YKExitISR(){ 
	jmp	L_YAKkernel_13
L_YAKkernel_14:
	; >>>>> Line:	115
	; >>>>> --YKISRDepth; 
	dec	word [YKISRDepth]
	; >>>>> Line:	118
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_15
	; >>>>> Line:	120
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_YAKkernel_15:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_13:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_14
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	125
	; >>>>> void YKIdleTask(){ 
	jmp	L_YAKkernel_17
L_YAKkernel_18:
	; >>>>> Line:	127
	; >>>>> while(1){ 
	jmp	L_YAKkernel_20
L_YAKkernel_19:
	; >>>>> Line:	128
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	130
	; >>>>> ++YKIdleCount; 
	inc	word [YKIdleCount]
	; >>>>> Line:	131
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_YAKkernel_20:
	jmp	L_YAKkernel_19
L_YAKkernel_21:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_17:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_18
	ALIGN	2
YKNewTask:
	; >>>>> Line:	136
	; >>>>> void YKNewTask(void* taskFunc, void* taskStack, int priority){ 
	jmp	L_YAKkernel_23
L_YAKkernel_24:
	; >>>>> Line:	139
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKTCBMallocIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBs
	mov	word [bp-2], ax
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	; >>>>> Line:	139
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	140
	; >>>>> ++YKTCBMallocIndex; 
	inc	word [YKTCBMallocIndex]
	; >>>>> Line:	151
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	152
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	154
	; >>>>> *(newStackS 
	mov	si, word [bp-4]
	mov	word [si], 64
	; >>>>> Line:	155
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	156
	; >>>>> *(newStackSP) = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	157
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	158
	; >>>>> *(newStackSP) = (int)taskFunc; 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	159
	; >>>>> newStackSP = newStackSP - 5; 
	mov	ax, word [bp-4]
	sub	ax, 10
	mov	word [bp-4], ax
	; >>>>> Line:	160
	; >>>>> *(newStackSP) = (int)taskStack; 
	mov	si, word [bp-4]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	161
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	162
	; >>>>> newStackSP = newStackSP - 2; 
	mov	ax, word [bp-4]
	sub	ax, 4
	mov	word [bp-4], ax
	; >>>>> Line:	170
	; >>>>> newTask->stackPtr = (int*)newStackSP; 
	mov	si, word [bp-2]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	174
	; >>>>> newTask->priority = priority; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	175
	; >>>>> newTask->next =  0 ; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	176
	; >>>>> newTask->prev =  0 ; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	177
	; >>>>> newTask->delayTicks = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	178
	; >>>>> newTask->blockReason =  0 ; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	180
	; >>>>> YKAddToReadyList(newTask); 
	push	word [bp-2]
	call	YKAddToReadyList
	add	sp, 2
	; >>>>> Line:	181
	; >>>>> if (YKIsRunning && YKCurrentTask ==   
	mov	ax, word [YKIsRunning]
	test	ax, ax
	je	L_YAKkernel_25
	mov	ax, word [YKCurrentTask]
	test	ax, ax
	jne	L_YAKkernel_25
	; >>>>> Line:	182
	; >>>>> YKScheduler(); 
	call	YKScheduler
	jmp	L_YAKkernel_26
L_YAKkernel_25:
	; >>>>> Line:	183
	; >>>>> else if (YKIsRunning) 
	mov	ax, word [YKIsRunning]
	test	ax, ax
	je	L_YAKkernel_27
	; >>>>> Line:	184
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_27:
L_YAKkernel_26:
	; >>>>> Line:	186
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_23:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_24
	ALIGN	2
YKRun:
	; >>>>> Line:	189
	; >>>>> void YKRun(){ 
	jmp	L_YAKkernel_29
L_YAKkernel_30:
	; >>>>> Line:	193
	; >>>>> YKIsRunning = 1; 
	mov	word [YKIsRunning], 1
	; >>>>> Line:	194
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_29:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_30
	ALIGN	2
YKScheduler:
	; >>>>> Line:	199
	; >>>>> void YKScheduler(){ 
	jmp	L_YAKkernel_32
L_YAKkernel_33:
	; >>>>> Line:	200
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	201
	; >>>>> if (!YKIsRunning) return; 
	mov	ax, word [YKIsRunning]
	test	ax, ax
	jne	L_YAKkernel_34
	; >>>>> Line:	201
	; >>>>> if (!YKIsRunning) return; 
	jmp	L_YAKkernel_35
L_YAKkernel_34:
	; >>>>> Line:	203
	; >>>>> if (YKReadyTasks != YKCurrentTask){ 
	mov	ax, word [YKCurrentTask]
	cmp	ax, word [YKReadyTasks]
	je	L_YAKkernel_36
	; >>>>> Line:	208
	; >>>>> YKCurrentTask = YKReadyTasks; 
	mov	ax, word [YKReadyTasks]
	mov	word [YKCurrentTask], ax
	; >>>>> Line:	209
	; >>>>> ++YKCtxSwCount; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	215
	; >>>>>  
	call	YKDispatcher
L_YAKkernel_36:
L_YAKkernel_35:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_32:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_33
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	222
	; >>>>> void YKDispatcher(){ 
	jmp	L_YAKkernel_38
L_YAKkernel_39:
	; >>>>> Line:	226
	; >>>>> SwitchContext(); 
	mov	si, word [YKCurrentTask]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	226
	; >>>>> SwitchContext(); 
	call	SwitchContext
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_38:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_39
	ALIGN	2
YKAddToReadyList:
	; >>>>> Line:	232
	; >>>>> void YKAddToReadyList(TCBp newTask){ 
	jmp	L_YAKkernel_41
L_YAKkernel_42:
	; >>>>> Line:	236
	; >>>>> if (YKReadyTasks ==  0 ){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
	mov	ax, word [YKReadyTasks]
	mov	word [bp-4], ax
	; >>>>> Line:	236
	; >>>>> if (YKReadyTasks ==  0 ){ 
	mov	ax, word [YKReadyTasks]
	test	ax, ax
	jne	L_YAKkernel_43
	; >>>>> Line:	237
	; >>>>> YKReadyTasks = newTask; 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_44
L_YAKkernel_43:
	; >>>>> Line:	240
	; >>>>> else if (YKReadyTasks->priority > newPriority){ 
	mov	si, word [YKReadyTasks]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jge	L_YAKkernel_45
	; >>>>> Line:	241
	; >>>>> newTask->next = YKReadyTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKReadyTasks]
	mov	word [si], ax
	; >>>>> Line:	242
	; >>>>> YKReadyTasks->prev = newTask; 
	mov	si, word [YKReadyTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	243
	; >>>>> YKReadyTasks = newTask; 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_46
L_YAKkernel_45:
	; >>>>> Line:	247
	; >>>>> while (taskListPtr->next !=  0  && taskListPtr->priority < newPriority){ 
	jmp	L_YAKkernel_48
L_YAKkernel_47:
	; >>>>> Line:	248
	; >>>>> 0 ){ 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_YAKkernel_48:
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_50
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jg	L_YAKkernel_47
L_YAKkernel_50:
L_YAKkernel_49:
	; >>>>> Line:	251
	; >>>>> if (taskListPtr->priority < newPriority){ 
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jle	L_YAKkernel_51
	; >>>>> Line:	252
	; >>>>> newTask->next = taskListPtr->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	253
	; >>>>> taskListPtr->next = newTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	254
	; >>>>> newTask->prev = taskListPtr; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	255
	; >>>>> if (newTask->next !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_52
	; >>>>> Line:	256
	; >>>>> newTask->next->prev = newTask; 
	mov	si, word [bp+4]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
L_YAKkernel_52:
	jmp	L_YAKkernel_53
L_YAKkernel_51:
	; >>>>> Line:	261
	; >>>>> newTask->prev = taskListPtr->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	262
	; >>>>> if (taskListPtr->prev !=  0 ) 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_54
	; >>>>> Line:	263
	; >>>>> taskListPtr->prev->next = newTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
L_YAKkernel_54:
	; >>>>> Line:	264
	; >>>>> taskListPtr->prev = newTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	265
	; >>>>> newTask->next = taskListPtr; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_YAKkernel_53:
L_YAKkernel_46:
L_YAKkernel_44:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_41:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_42
	ALIGN	2
YKAddToSuspendedList:
	; >>>>> Line:	270
	; >>>>> void YKAddToSuspendedList(TCBp task){ 
	jmp	L_YAKkernel_56
L_YAKkernel_57:
	; >>>>> Line:	272
	; >>>>> if (YKSuspendedTasks ==  0 ){ 
	mov	ax, word [YKSuspendedTasks]
	test	ax, ax
	jne	L_YAKkernel_58
	; >>>>> Line:	273
	; >>>>> task 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
	; >>>>> Line:	274
	; >>>>> task->next =  0 ; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	275
	; >>>>> task->next =  0 ; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_YAKkernel_59
L_YAKkernel_58:
	; >>>>> Line:	278
	; >>>>> task->prev =  0 ; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	279
	; >>>>> task->next = YKSuspendedTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKSuspendedTasks]
	mov	word [si], ax
	; >>>>> Line:	280
	; >>>>> YKSuspendedTasks->prev = task; 
	mov	si, word [YKSuspendedTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	281
	; >>>>> YKSuspendedTasks = task; 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
L_YAKkernel_59:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_56:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_57
	ALIGN	2
YKRemoveFromList:
	; >>>>> Line:	288
	; >>>>> void YKRemoveFromList(TCBp task){ 
	jmp	L_YAKkernel_61
L_YAKkernel_62:
	; >>>>> Line:	290
	; >>>>> if (YKReadyTasks == task){ 
	mov	ax, word [bp+4]
	cmp	ax, word [YKReadyTasks]
	jne	L_YAKkernel_63
	; >>>>> Line:	291
	; >>>>> YKReadyTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_64
L_YAKkernel_63:
	; >>>>> Line:	293
	; >>>>> else if (YKSuspendedTasks == task){ 
	mov	ax, word [bp+4]
	cmp	ax, word [YKSuspendedTasks]
	jne	L_YAKkernel_65
	; >>>>> Line:	294
	; >>>>> YKSuspendedTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspendedTasks], ax
L_YAKkernel_65:
L_YAKkernel_64:
	; >>>>> Line:	297
	; >>>>> if (task->next !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_66
	; >>>>> Line:	298
	; >>>>> task->next->prev = task->prev; 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_66:
	; >>>>> Line:	300
	; >>>>> if (task->prev !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_67
	; >>>>> Line:	301
	; >>>>> task->prev->next = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_67:
	; >>>>> Line:	304
	; >>>>> task->prev =  0 ; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	305
	; >>>>> layTask( 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_61:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_62
	ALIGN	2
YKUpdateSuspendedTasks:
	; >>>>> Line:	310
	; >>>>> void YKUpdateSuspendedTasks(){ 
	jmp	L_YAKkernel_69
L_YAKkernel_70:
	; >>>>> Line:	315
	; >>>>> while (currTCB !=  0 ){ 
	mov	ax, word [YKSuspendedTasks]
	mov	word [bp-2], ax
	mov	word [bp-4], 0
	; >>>>> Line:	315
	; >>>>> while (currTCB !=  0 ){ 
	jmp	L_YAKkernel_72
L_YAKkernel_71:
	; >>>>> Line:	316
	; >>>>> currTCB->delayTicks = currTCB->delayTicks -1 ; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	318
	; >>>>> if (currTCB->delayTicks <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_YAKkernel_74
	; >>>>> Line:	327
	; >>>>> movingTCB = currTCB; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	328
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	329
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	330
	; >>>>> YKRemoveFromList(movingTCB); 
	push	word [bp-4]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	331
	; >>>>> YKAddToReadyList(movingTCB); 
	push	word [bp-4]
	call	YKAddToReadyList
	add	sp, 2
	; >>>>> Line:	332
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	jmp	L_YAKkernel_75
L_YAKkernel_74:
	; >>>>> Line:	335
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_YAKkernel_75:
L_YAKkernel_72:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_YAKkernel_71
L_YAKkernel_73:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_69:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_70
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	343
	; >>>>> itHub/yakOS/YA 
	jmp	L_YAKkernel_77
L_YAKkernel_78:
	; >>>>> Line:	344
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	345
	; >>>>> if (ticks > 0){ 
	cmp	word [bp+4], 0
	jle	L_YAKkernel_79
	; >>>>> Line:	353
	; >>>>> YKCurrentTask->delayTicks += ticks; 
	mov	si, word [YKCurrentTask]
	add	si, 6
	mov	ax, word [bp+4]
	add	word [si], ax
L_YAKkernel_79:
	; >>>>> Line:	356
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	357
	; >>>>> YKAddToSuspendedList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKAddToSuspendedList
	add	sp, 2
	; >>>>> Line:	360
	; >>>>> asm("int 11h"); 
	int 11h
	; >>>>> Line:	362
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_77:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_78
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	366
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_YAKkernel_81
L_YAKkernel_82:
	; >>>>> Line:	368
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKSemaphoreIndex]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSemaphores
	mov	word [bp-2], ax
	; >>>>> Line:	368
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	369
	; >>>>> newSem->count = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	370
	; >>>>> newSem->tasks =  0 ; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	371
	; >>>>> ++YKSemaphoreIndex; 
	inc	word [YKSemaphoreIndex]
	; >>>>> Line:	379
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	380
	; >>>>> return newSem; 
	mov	ax, word [bp-2]
L_YAKkernel_83:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_81:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_82
	ALIGN	2
YKSemPend:
	; >>>>> Line:	382
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_YAKkernel_85
L_YAKkernel_86:
	; >>>>> Line:	383
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	390
	; >>>>> if (semaphore->count > 0){ 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_YAKkernel_87
	; >>>>> Line:	391
	; >>>>> --(semaphore->count); 
	dec	word [si]
	; >>>>> Line:	392
	; >>>>> return; 
	jmp	L_YAKkernel_88
L_YAKkernel_87:
	; >>>>> Line:	398
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	399
	; >>>>> YKCurrentTask->next = semaphore->tasks; 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [YKCurrentTask]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	400
	; >>>>> semaphore->tasks = YKCurrentTask; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [YKCurrentTask]
	mov	word [si], ax
	; >>>>> Line:	403
	; >>>>> if (YKISRDepth == 0) 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_89
	; >>>>> Line:	404
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_89:
	; >>>>> Line:	406
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_YAKkernel_88:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_85:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_86
	ALIGN	2
YKSemPost:
	; >>>>> Line:	409
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_YAKkernel_91
L_YAKkernel_92:
	; >>>>> Line:	412
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	420
	; >>>>> ++(semaphore->count); 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	422
	; >>>>> currTask = semaphore->tasks; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	423
	; >>>>> if (currTask !=  0 ) 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_YAKkernel_93
	; >>>>> Line:	424
	; >>>>> --(semaphore->count); 
	mov	si, word [bp+4]
	dec	word [si]
L_YAKkernel_93:
	; >>>>> Line:	426
	; >>>>> while (currTask !=  0  && currTask != currTask->next){ 
	jmp	L_YAKkernel_95
L_YAKkernel_94:
	; >>>>> Line:	427
	; >>>>> addTask = currTask; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	428
	; >>>>> currTask = currTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	429
	; >>>>> YKAddToReadyList(addTask); 
	push	word [bp-4]
	call	YKAddToReadyList
	add	sp, 2
L_YAKkernel_95:
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_YAKkernel_97
	mov	si, word [bp-2]
	add	si, 8
	cmp	ax, word [si]
	jne	L_YAKkernel_94
L_YAKkernel_97:
L_YAKkernel_96:
	; >>>>> Line:	431
	; >>>>> semaphore->tasks =  0 ; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	432
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_98
	; >>>>> Line:	433
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_98:
	; >>>>> Line:	435
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_91:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_92
	ALIGN	2
YKQCreate:
	; >>>>> Line:	443
	; >>>>> YKQ* YKQCreate(void **start, unsigned size){ 
	jmp	L_YAKkernel_100
L_YAKkernel_101:
	; >>>>> Line:	445
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKQueueIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKQueues
	mov	word [bp-2], ax
	; >>>>> Line:	445
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	446
	; >>>>> queue->head = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
	; >>>>> Line:	447
	; >>>>> queue->tail = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	448
	; >>>>> queue->size = size; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	449
	; >>>>> queue->length = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	450
	; >>>>> queue->queue = start; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	451
	; >>>>> ++YKQueueIndex; 
	inc	word [YKQueueIndex]
	; >>>>> Line:	452
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	453
	; >>>>> return (void*)queue; 
	mov	ax, word [bp-2]
L_YAKkernel_102:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_100:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_101
L_YAKkernel_105:
	DB	0xA,0xA,"ERROR: CANNOT SWITCH TASK SINCE IN ISR------------------------",0xA,0xA,0
L_YAKkernel_104:
	DB	0xA,0xA,"ERROR: TWO TASKS ARE WAITING ON THE SAME QUEUE.----------------------",0xA,0xA,0
	ALIGN	2
YKQPend:
	; >>>>> Line:	459
	; >>>>> void* YKQPend(YKQ *queue){ 
	jmp	L_YAKkernel_106
L_YAKkernel_107:
	; >>>>> Line:	468
	; >>>>> YKEnterMutex(); 
	mov	ax, word [bp+4]
	mov	word [bp-4], ax
	; >>>>> Line:	468
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	470
	; >>>>> if (messQ- 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_YAKkernel_108
	; >>>>> Line:	476
	; >>>>> if (messQ->tasks !=  0 ){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_109
	; >>>>> Line:	477
	; >>>>> printString("\n\nERROR: TWO TASKS ARE WAITING ON THE SAME QUEUE.----------------------\n\n"); 
	mov	ax, L_YAKkernel_104
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	478
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
L_YAKkernel_109:
	; >>>>> Line:	482
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	484
	; >>>>> YKCurrentTask->next = messQ->tasks; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [YKCurrentTask]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	485
	; >>>>> messQ->tasks = YKCurrentTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [YKCurrentTask]
	mov	word [si], ax
	; >>>>> Line:	486
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_110
	; >>>>> Line:	488
	; >>>>> asm("int 11h"); 
	int 11h
	jmp	L_YAKkernel_111
L_YAKkernel_110:
	; >>>>> Line:	492
	; >>>>> printString("\n\nERROR: CANNOT SWITCH TASK SINCE IN ISR------------------------\n\n"); 
	mov	ax, L_YAKkernel_105
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	493
	; >>>>> exit(6); 
	mov	al, 6
	push	ax
	call	exit
	add	sp, 2
L_YAKkernel_111:
L_YAKkernel_108:
	; >>>>> Line:	496
	; >>>>> 5 "C 
	call	YKExitMutex
	; >>>>> Line:	498
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	501
	; >>>>> messQ->length = messQ->length - 1; 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-4]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	504
	; >>>>> message = messQ->queue[messQ->head]; 
	mov	si, word [bp-4]
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-4]
	add	di, 8
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	507
	; >>>>> ++(messQ->head); 
	mov	si, word [bp-4]
	inc	word [si]
	; >>>>> Line:	508
	; >>>>> if (messQ->head == messQ->size ) 
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_YAKkernel_112
	; >>>>> Line:	509
	; >>>>> messQ->head = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
L_YAKkernel_112:
	; >>>>> Line:	518
	; >>>>> return message; 
	mov	ax, word [bp-2]
L_YAKkernel_113:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_106:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_107
	ALIGN	2
YKQPost:
	; >>>>> Line:	524
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_YAKkernel_115
L_YAKkernel_116:
	; >>>>> Line:	530
	; >>>>> YKEnterMutex(); 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	530
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	540
	; >>>>> if (messQ->length >= messQ->size){ 
	mov	si, word [bp-2]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_YAKkernel_117
	; >>>>> Line:	545
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_YAKkernel_118
L_YAKkernel_117:
	; >>>>> Line:	549
	; >>>>> ++(messQ->length); 
	mov	si, word [bp-2]
	add	si, 6
	inc	word [si]
	; >>>>> Line:	550
	; >>>>> messQ->queue[messQ->tail] = msg; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	di, 8
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	553
	; >>>>> ++(messQ->tail); 
	mov	si, word [bp-2]
	add	si, 2
	inc	word [si]
	; >>>>> Line:	554
	; >>>>> if (messQ->tail == messQ->size ) 
	mov	si, word [bp-2]
	add	si, 2
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_YAKkernel_119
	; >>>>> Line:	555
	; >>>>> messQ->tail = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
L_YAKkernel_119:
	; >>>>> Line:	558
	; >>>>> currTask = messQ->tasks; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	559
	; >>>>> while (currTask !=  0  && currTask != currTask->next){ 
	jmp	L_YAKkernel_121
L_YAKkernel_120:
	; >>>>> Line:	560
	; >>>>> addTask = currTask; 
	mov	ax, word [bp-4]
	mov	word [bp-6], ax
	; >>>>> Line:	561
	; >>>>> currTask = currTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	562
	; >>>>> YKAddToReadyList(addTask); 
	push	word [bp-6]
	call	YKAddToReadyList
	add	sp, 2
L_YAKkernel_121:
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_YAKkernel_123
	mov	si, word [bp-4]
	add	si, 8
	cmp	ax, word [si]
	jne	L_YAKkernel_120
L_YAKkernel_123:
L_YAKkernel_122:
	; >>>>> Line:	565
	; >>>>> messQ->tasks =  0 ; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	567
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	568
	; >>>>> return messQ->length; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
L_YAKkernel_118:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_115:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_YAKkernel_116
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	572
	; >>>>> YKEVENT* YKEventCreate(unsigned initialValue){ 
	jmp	L_YAKkernel_125
L_YAKkernel_126:
	; >>>>> Line:	574
	; >>>>> " 
	call	YKEnterMutex
	; >>>>> Line:	575
	; >>>>> event = &YKEventGroupList[YKEventGroupIndex]; 
	mov	ax, word [YKEventGroupIndex]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEventGroupList
	mov	word [bp-2], ax
	; >>>>> Line:	576
	; >>>>> event->events = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	577
	; >>>>> event->blockedTasks =  0 ; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	578
	; >>>>> ++YKEventGroupIndex; 
	inc	word [YKEventGroupIndex]
	; >>>>> Line:	579
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	580
	; >>>>> return (YKEVENT*)event; 
	mov	ax, word [bp-2]
L_YAKkernel_127:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_125:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_126
	ALIGN	2
YKEventPend:
	; >>>>> Line:	582
	; >>>>> unsigned YKEventPend(YKEVENT *eventpointer, unsigned eventMask, int waitMode){ 
	jmp	L_YAKkernel_129
L_YAKkernel_130:
	; >>>>> Line:	584
	; >>>>> YKEnterMutex(); 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	584
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	585
	; >>>>> YKCurrentTask->blockReason = eventMask | waitMode; 
	mov	ax, word [bp+8]
	or	ax, word [bp+6]
	mov	si, word [YKCurrentTask]
	add	si, 2
	mov	word [si], ax
	; >>>>> Line:	588
	; >>>>> if (!YKEventReadyToUnblock(event,eventMask)){ 
	push	word [bp+6]
	push	word [bp-2]
	call	YKEventReadyToUnblock
	add	sp, 4
	test	ax, ax
	jne	L_YAKkernel_131
	; >>>>> Line:	593
	; >>>>> dition){ 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	594
	; >>>>> if (event->blockedTasks !=  0 ) 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_132
	; >>>>> Line:	595
	; >>>>> ((TCBp)event->blockedTasks)->prev = YKCurrentTask; 
	mov	si, word [bp-2]
	add	si, 2
	mov	si, word [si]
	add	si, 10
	mov	ax, word [YKCurrentTask]
	mov	word [si], ax
L_YAKkernel_132:
	; >>>>> Line:	597
	; >>>>> YKCurrentTask->next = event->blockedTasks; 
	mov	si, word [bp-2]
	add	si, 2
	mov	di, word [YKCurrentTask]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	598
	; >>>>> event->blockedTasks = YKCurrentTask; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [YKCurrentTask]
	mov	word [si], ax
	; >>>>> Line:	600
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_133
	; >>>>> Line:	601
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_133:
	; >>>>> Line:	603
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_YAKkernel_131:
	; >>>>> Line:	605
	; >>>>> return event->events; 
	mov	si, word [bp-2]
	mov	ax, word [si]
L_YAKkernel_134:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_129:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_130
	ALIGN	2
YKEventReadyToUnblock:
	; >>>>> Line:	607
	; >>>>> int YKEventReadyToUnblock(YKEventGroup* event, unsigned waitCondition){ 
	jmp	L_YAKkernel_136
L_YAKkernel_137:
	; >>>>> Line:	611
	; >>>>> if (waitCondition &  0x8 ){ 
	mov	ax, word [bp+6]
	and	ax, 65511
	mov	word [bp-2], ax
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	611
	; >>>>> if (waitCondition &  0x8 ){ 
	mov	ax, word [bp+6]
	and	ax, 8
	je	L_YAKkernel_138
	; >>>>> Line:	612
	; >>>>> if (condition){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_YAKkernel_139
	; >>>>> Line:	613
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_YAKkernel_140
L_YAKkernel_139:
	jmp	L_YAKkernel_141
L_YAKkernel_138:
	; >>>>> Line:	617
	; >>>>> if (condition == mask){ 
	mov	ax, word [bp-2]
	cmp	ax, word [bp-4]
	jne	L_YAKkernel_142
	; >>>>> Line:	618
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_YAKkernel_140
L_YAKkernel_142:
L_YAKkernel_141:
	; >>>>> Line:	621
	; >>>>> return 0; 
	xor	ax, ax
L_YAKkernel_140:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_136:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_137
L_YAKkernel_144:
	DB	"Not ready for event input",0xA,0
	ALIGN	2
YKEventSet:
	; >>>>> Line:	623
	; >>>>> void YKEventSet(YKEVENT *eventpointer, unsigned eventMask){ 
	jmp	L_YAKkernel_145
L_YAKkernel_146:
	; >>>>> Line:	631
	; >>>>> if (eventpointer ==  0  || !YKIsRunning){ 
	mov	word [bp-4], 0
	mov	word [bp-6], 0
	mov	ax, word [bp+4]
	mov	word [bp-8], ax
	; >>>>> Line:	631
	; >>>>> if (eventpointer ==  0  || !YKIsRunning){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_YAKkernel_148
	mov	ax, word [YKIsRunning]
	test	ax, ax
	jne	L_YAKkernel_147
L_YAKkernel_148:
	; >>>>> Line:	632
	; >>>>> printString("Not ready for event input\n"); 
	mov	ax, L_YAKkernel_144
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	633
	; >>>>> return; 
	jmp	L_YAKkernel_149
L_YAKkernel_147:
	; >>>>> Line:	636
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	638
	; >>>>> event->events |= eventMask; 
	mov	si, word [bp-8]
	mov	ax, word [bp+6]
	or	word [si], ax
	; >>>>> Line:	640
	; >>>>> task = event->blockedTasks; 
	mov	si, word [bp-8]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	641
	; >>>>> while (task !=  0 ){ 
	jmp	L_YAKkernel_151
L_YAKkernel_150:
	; >>>>> Line:	642
	; >>>>> nexttask = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	643
	; >>>>> if (YKEventReadyToUnblo 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	push	word [bp-8]
	call	YKEventReadyToUnblock
	add	sp, 4
	test	ax, ax
	je	L_YAKkernel_153
	; >>>>> Line:	645
	; >>>>> switchNeeded = 1; 
	mov	word [bp-6], 1
	; >>>>> Line:	647
	; >>>>> if (event->blockedTasks == task) 
	mov	si, word [bp-8]
	add	si, 2
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jne	L_YAKkernel_154
	; >>>>> Line:	648
	; >>>>> event->blockedTasks = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-8]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_154:
	; >>>>> Line:	650
	; >>>>> YKRemoveFromList(task); 
	push	word [bp-2]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	651
	; >>>>> YKAddToReadyList(task); 
	push	word [bp-2]
	call	YKAddToReadyList
	add	sp, 2
L_YAKkernel_153:
	; >>>>> Line:	653
	; >>>>> task = nexttask; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
L_YAKkernel_151:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_YAKkernel_150
L_YAKkernel_152:
	; >>>>> Line:	655
	; >>>>> if (YKISRDepth == 0 && switchNeeded){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_155
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_YAKkernel_155
	; >>>>> Line:	656
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_155:
	; >>>>> Line:	658
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_YAKkernel_149:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_145:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_YAKkernel_146
	ALIGN	2
YKEventReset:
	; >>>>> Line:	661
	; >>>>> void YKEventReset(YKEVENT *eventpointer, unsigned eventMask){ 
	jmp	L_YAKkernel_157
L_YAKkernel_158:
	; >>>>> Line:	663
	; >>>>> YKEnterMutex(); 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	663
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	664
	; >>>>> event->events &= ~eventMask; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	not	ax
	and	word [si], ax
	; >>>>> Line:	665
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_157:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_158
	ALIGN	2
printCurrentTask:
	; >>>>> Line:	669
	; >>>>> void printCurrentTask(){ 
	jmp	L_YAKkernel_160
L_YAKkernel_161:
	; >>>>> Line:	670
	; >>>>> printTCB(YKCurren 
	push	word [YKCurrentTask]
	call	printTCB
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_160:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_161
L_YAKkernel_170:
	DB	"]",0xA,0
L_YAKkernel_169:
	DB	", ",0
L_YAKkernel_168:
	DB	"Contents: [",0
L_YAKkernel_167:
	DB	" tasks:",0
L_YAKkernel_166:
	DB	" t:",0
L_YAKkernel_165:
	DB	" h:",0
L_YAKkernel_164:
	DB	" count:",0
L_YAKkernel_163:
	DB	"Queue size:",0
	ALIGN	2
printQueue:
	; >>>>> Line:	674
	; >>>>> void printQueue(YKMQ* queue){ 
	jmp	L_YAKkernel_171
L_YAKkernel_172:
	; >>>>> Line:	676
	; >>>>> printString("Queue size:"); 
	mov	word [bp-2], 0
	; >>>>> Line:	676
	; >>>>> printString("Queue size:"); 
	mov	ax, L_YAKkernel_163
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	677
	; >>>>> printInt(queue->size); 
	mov	si, word [bp+4]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	678
	; >>>>> printString(" count:"); 
	mov	ax, L_YAKkernel_164
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	679
	; >>>>> printInt(queue->length); 
	mov	si, word [bp+4]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	680
	; >>>>> printString(" h:"); 
	mov	ax, L_YAKkernel_165
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	681
	; >>>>> printInt(queue->head); 
	mov	si, word [bp+4]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	682
	; >>>>> printString(" t:"); 
	mov	ax, L_YAKkernel_166
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	683
	; >>>>> printInt(queue->tail); 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	684
	; >>>>> printString(" tasks:"); 
	mov	ax, L_YAKkernel_167
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	685
	; >>>>> printTCB(queue->tasks); 
	mov	si, word [bp+4]
	add	si, 10
	push	word [si]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	686
	; >>>>> printString("Contents: ["); 
	mov	ax, L_YAKkernel_168
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	687
	; >>>>> for (i=0;i<queue->size;i++){ 
	mov	word [bp-2], 0
	jmp	L_YAKkernel_174
L_YAKkernel_173:
	; >>>>> Line:	688
	; >>>>> printWord((int)queue->queue[i]); 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 8
	add	si, word [di]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	689
	; >>>>> printString(", "); 
	mov	ax, L_YAKkernel_169
	push	ax
	call	printString
	add	sp, 2
L_YAKkernel_176:
	inc	word [bp-2]
L_YAKkernel_174:
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jb	L_YAKkernel_173
L_YAKkernel_175:
	; >>>>> Line:	691
	; >>>>> printString("]\n"); 
	mov	ax, L_YAKkernel_170
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_171:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_172
L_YAKkernel_184:
	DB	" ",0xA,0
L_YAKkernel_183:
	DB	"->",0
L_YAKkernel_182:
	DB	")",0
L_YAKkernel_181:
	DB	":0x",0
L_YAKkernel_180:
	DB	"/",0
L_YAKkernel_179:
	DB	"TCB(",0
L_YAKkernel_178:
	DB	"None",0xA,0
	ALIGN	2
printTCB:
	; >>>>> Line:	695
	; >>>>> void printTCB(void* ptcb){ 
	jmp	L_YAKkernel_185
L_YAKkernel_186:
	; >>>>> Line:	698
	; >>>>> if (ptcb ==  0 ){ 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	698
	; >>>>> if (ptcb ==  0 ){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_YAKkernel_187
	; >>>>> Line:	699
	; >>>>> printString("None\n"); 
	mov	ax, L_YAKkernel_178
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	700
	; >>>>> return; 
	jmp	L_YAKkernel_188
L_YAKkernel_187:
	; >>>>> Line:	703
	; >>>>> printString("TCB("); 
	mov	ax, L_YAKkernel_179
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	704
	; >>>>> printInt(tcb->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	705
	; >>>>> printString("/"); 
	mov	ax, L_YAKkernel_180
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	706
	; >>>>> printInt(tcb->delayTicks); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	707
	; >>>>> printString(":0x"); 
	mov	ax, L_YAKkernel_181
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	708
	; >>>>> printWord((int)tcb->stackPtr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	709
	; >>>>> printString(")"); 
	mov	ax, L_YAKkernel_182
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	710
	; >>>>> if (tcb->next !=  0 ){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_189
	; >>>>> Line:	711
	; >>>>> printString("->"); 
	mov	ax, L_YAKkernel_183
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	712
	; >>>>> printTCB(tcb->next); 
	mov	si, word [bp-2]
	add	si, 8
	push	word [si]
	call	printTCB
	add	sp, 2
	jmp	L_YAKkernel_190
L_YAKkernel_189:
	; >>>>> Line:	715
	; >>>>> printString(" \n"); 
	mov	ax, L_YAKkernel_184
	push	ax
	call	printString
	add	sp, 2
L_YAKkernel_190:
L_YAKkernel_188:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_185:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_186
L_YAKkernel_194:
	DB	"Semaphore #",0
L_YAKkernel_193:
	DB	"Suspended Tasks:  ",0
L_YAKkernel_192:
	DB	"Ready Tasks:  ",0
	ALIGN	2
printTaskLists:
	; >>>>> Line:	719
	; >>>>> void printTaskLists(){ 
	jmp	L_YAKkernel_195
L_YAKkernel_196:
	; >>>>> Line:	721
	; >>>>> printString("Ready Tasks:  "); 
	mov	word [bp-2], 0
	; >>>>> Line:	721
	; >>>>> printString("Ready Tasks:  "); 
	mov	ax, L_YAKkernel_192
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	722
	; >>>>> printTCB(YKReadyTasks); 
	push	word [YKReadyTasks]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	723
	; >>>>> printString("Suspended Tasks:  "); 
	mov	ax, L_YAKkernel_193
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	724
	; >>>>> printTCB(YKSuspendedTasks); 
	push	word [YKSuspendedTasks]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	725
	; >>>>> for (i=0; i< YKSemaphoreIndex;i++){ 
	mov	word [bp-2], 0
	jmp	L_YAKkernel_198
L_YAKkernel_197:
	; >>>>> Line:	726
	; >>>>> printSt 
	mov	ax, L_YAKkernel_194
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	727
	; >>>>> printInt(i); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	728
	; >>>>> printString(" tasks:"); 
	mov	ax, L_YAKkernel_167
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	729
	; >>>>> printTCB(YKSemaphores[i].tasks); 
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSemaphores
	mov	si, ax
	add	si, 2
	push	word [si]
	call	printTCB
	add	sp, 2
L_YAKkernel_200:
	inc	word [bp-2]
L_YAKkernel_198:
	mov	ax, word [YKSemaphoreIndex]
	cmp	ax, word [bp-2]
	jg	L_YAKkernel_197
L_YAKkernel_199:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_195:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_196
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKCurrentTask:
	TIMES	2 db 0
YKReadyTasks:
	TIMES	2 db 0
YKSuspendedTasks:
	TIMES	2 db 0
YKTCBs:
	TIMES	72 db 0
YKTCBMallocIndex:
	TIMES	2 db 0
YKSemaphores:
	TIMES	20 db 0
IdleStack:
	TIMES	200 db 0
YKQueues:
	TIMES	60 db 0
YKEventGroupList:
	TIMES	20 db 0
YKISRDepth:
	TIMES	2 db 0
YKIsRunning:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_app_5:
	DB	"CharTask     (C)",0xA,0
L_app_4:
	DB	"CharTask     (B)",0xA,0
L_app_3:
	DB	"CharTask     (A)",0xA,0
L_app_2:
	DB	"Oops! At least one event should be set in return value!",0xA,0
L_app_1:
	DB	"Started CharTask     (2)",0xA,0
	ALIGN	2
CharTask:
	; >>>>> Line:	23
	; >>>>> { 
	jmp	L_app_6
L_app_7:
	; >>>>> Line:	26
	; >>>>> printString("Started CharTask     (2)\n"); 
	mov	ax, L_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	28
	; >>>>> while(1) { 
	jmp	L_app_9
L_app_8:
	; >>>>> Line:	29
	; >>>>> events = YKEventPend(charEvent, 
	mov	ax, 8
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	33
	; >>>>> cha 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_app_11
	; >>>>> Line:	34
	; >>>>> printString("Oops! At least one event should be set " 
	mov	ax, L_app_2
	push	ax
	call	printString
	add	sp, 2
L_app_11:
	; >>>>> Line:	38
	; >>>>> if(events &  0x1 ) { 
	mov	ax, word [bp-2]
	and	ax, 1
	je	L_app_12
	; >>>>> Line:	39
	; >>>>> printString("CharTask     (A)\n"); 
	mov	ax, L_app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	40
	; >>>>> YKEventReset(charEvent,  0x1 ); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_app_12:
	; >>>>> Line:	43
	; >>>>> if(events &  0x2 ) { 
	mov	ax, word [bp-2]
	and	ax, 2
	je	L_app_13
	; >>>>> Line:	44
	; >>>>> printString("CharTask     (B)\n"); 
	mov	ax, L_app_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	45
	; >>>>> YKEventReset(charEvent,  0x2 ); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_app_13:
	; >>>>> Line:	48
	; >>>>> if(events &  0x4 ) { 
	mov	ax, word [bp-2]
	and	ax, 4
	je	L_app_14
	; >>>>> Line:	49
	; >>>>> printString("CharTask     (C)\n"); 
	mov	ax, L_app_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	50
	; >>>>> YKEventReset(cha 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_app_14:
L_app_9:
	jmp	L_app_8
L_app_10:
	mov	sp, bp
	pop	bp
	ret
L_app_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_app_7
L_app_18:
	DB	"AllCharsTask (D)",0xA,0
L_app_17:
	DB	"Oops! Char events weren't reset by CharTask!",0xA,0
L_app_16:
	DB	"Started AllCharsTask (3)",0xA,0
	ALIGN	2
AllCharsTask:
	; >>>>> Line:	57
	; >>>>> { 
	jmp	L_app_19
L_app_20:
	; >>>>> Line:	60
	; >>>>> printString("Started AllCharsTask (3)\n"); 
	mov	ax, L_app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	62
	; >>>>> while(1) { 
	jmp	L_app_22
L_app_21:
	; >>>>> Line:	63
	; >>>>> events = YKEventPend(charEvent, 
	mov	ax, 16
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	68
	; >>>>> if(events != 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_app_24
	; >>>>> Line:	69
	; >>>>> printString("Oops! Char events weren't reset by CharTask!\n"); 
	mov	ax, L_app_17
	push	ax
	call	printString
	add	sp, 2
L_app_24:
	; >>>>> Line:	72
	; >>>>> printString("AllCharsTask (D)\n"); 
	mov	ax, L_app_18
	push	ax
	call	printString
	add	sp, 2
L_app_22:
	jmp	L_app_21
L_app_23:
	mov	sp, bp
	pop	bp
	ret
L_app_19:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_app_20
L_app_28:
	DB	"AllNumsTask  (123)",0xA,0
L_app_27:
	DB	"Oops! All events should be set in return value!",0xA,0
L_app_26:
	DB	"Started AllNumsTask  (1)",0xA,0
	ALIGN	2
AllNumsTask:
	; >>>>> Line:	78
	; >>>>> { 
	jmp	L_app_29
L_app_30:
	; >>>>> Line:	81
	; >>>>> printString("Starte 
	mov	ax, L_app_26
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	83
	; >>>>> while(1) { 
	jmp	L_app_32
L_app_31:
	; >>>>> Line:	84
	; >>>>> events = YKEventPend(numEvent, 
	mov	ax, 16
	push	ax
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	88
	; >>>>> if(events != ( 0x1  |  0x2  |  0x4 )) { 
	cmp	word [bp-2], 7
	je	L_app_34
	; >>>>> Line:	89
	; >>>>> printString("Oops! All events should be set in return value!\n"); 
	mov	ax, L_app_27
	push	ax
	call	printString
	add	sp, 2
L_app_34:
	; >>>>> Line:	92
	; >>>>> printString("AllNumsTask  (123)\n"); 
	mov	ax, L_app_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	94
	; >>>>> YKEventReset(numEvent,  0x1  |  0x2  |  0x4 ); 
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventReset
	add	sp, 4
L_app_32:
	jmp	L_app_31
L_app_33:
	mov	sp, bp
	pop	bp
	ret
L_app_29:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_app_30
L_app_40:
	DB	"% >>>>>",0xD,0xA,0
L_app_39:
	DB	", CPU usage: ",0
L_app_38:
	DB	"<<<<< Context switches: ",0
L_app_37:
	DB	"Determining CPU capacity",0xD,0xA,0
L_app_36:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	100
	; >>>>> { 
	jmp	L_app_41
L_app_42:
	; >>>>> Line:	104
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	105
	; >>>>>  
	mov	ax, L_app_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	106
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_app_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	107
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	108
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	109
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	110
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	111
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	113
	; >>>>> YKNewTask(CharTask, (void *) &CharTaskStk[ 512 ], 2); 
	mov	ax, 2
	push	ax
	mov	ax, (CharTaskStk+1024)
	push	ax
	mov	ax, CharTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	114
	; >>>>> YKNewTask(AllNumsTask, (void *) &AllNumsTaskStk[ 512 ], 1); 
	mov	ax, 1
	push	ax
	mov	ax, (AllNumsTaskStk+1024)
	push	ax
	mov	ax, AllNumsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	115
	; >>>>> YKNewTask(AllCharsTask, (void *) &AllCharsTaskStk[ 512 ], 3); 
	mov	ax, 3
	push	ax
	mov	ax, (AllCharsTaskStk+1024)
	push	ax
	mov	ax, AllCharsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	117
	; >>>>> while (1) 
	jmp	L_app_44
L_app_43:
	; >>>>> Line:	119
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	121
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	122
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	123
	; >>>>> sk, (voi 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	124
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	126
	; >>>>> printString("<<<<< Context switches: "); 
	mov	ax, L_app_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	127
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	128
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_app_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	129
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	130
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	133
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	134
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	135
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	136
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_app_44:
	jmp	L_app_43
L_app_45:
	mov	sp, bp
	pop	bp
	ret
L_app_41:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_app_42
	ALIGN	2
main:
	; >>>>> Line:	142
	; >>>>> { 
	jmp	L_app_47
L_app_48:
	; >>>>> Line:	143
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	145
	; >>>>> charEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [charEvent], ax
	; >>>>> Line:	146
	; >>>>> numEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [numEvent], ax
	; >>>>> Line:	147
	; >>>>> YKNewTask(STask, (voi 
	xor	ax, ax
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	149
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_app_47:
	push	bp
	mov	bp, sp
	jmp	L_app_48
	ALIGN	2
charEvent:
	TIMES	2 db 0
numEvent:
	TIMES	2 db 0
CharTaskStk:
	TIMES	1024 db 0
AllCharsTaskStk:
	TIMES	1024 db 0
AllNumsTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
