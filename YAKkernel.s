; Generated by c86 (BYU-NASM) 5.1 (beta) from YAKkernel.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKInitialize:
	; >>>>> Line:	45
	; >>>>> void YKInitialize(){ 
	jmp	L_YAKkernel_1
L_YAKkernel_2:
	; >>>>> Line:	46
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	49
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	50
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	51
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	52
	; >>>>> YKReadyTasks =  0 ; 
	mov	word [YKReadyTasks], 0
	; >>>>> Line:	53
	; >>>>> YKSuspendedTasks =  0 ; 
	mov	word [YKSuspendedTasks], 0
	; >>>>> Line:	55
	; >>>>> YKCurrentTask =  0 ; 
	mov	word [YKCurrentTask], 0
	; >>>>> Line:	56
	; >>>>> YKTCBMallocIndex = 0; 
	mov	word [YKTCBMallocIndex], 0
	; >>>>> Line:	57
	; >>>>> YKIsRunning = 0; 
	mov	word [YKIsRunning], 0
	; >>>>> Line:	60
	; >>>>> YKNewTask(YKIdleTask, &IdleStack[ 100 ],255); 
	mov	ax, 255
	push	ax
	mov	ax, (IdleStack+200)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	61
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_1:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_2
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	65
	; >>>>> void YKEnterMutex(){ 
	jmp	L_YAKkernel_4
L_YAKkernel_5:
	; >>>>> Line:	66
	; >>>>> asm("cli"); 
	cli
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_4:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_5
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	70
	; >>>>> void YKExitMutex(){ 
	jmp	L_YAKkernel_7
L_YAKkernel_8:
	; >>>>> Line:	71
	; >>>>> asm("sti"); 
	sti
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_7:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_8
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	75
	; >>>>> void YKEnterISR(){ 
	jmp	L_YAKkernel_10
L_YAKkernel_11:
	; >>>>> Line:	77
	; >>>>> ++YKISRDepth; 
	inc	word [YKISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_10:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_11
	ALIGN	2
YKExitISR:
	; >>>>> Line:	81
	; >>>>> void YKExitISR(){ 
	jmp	L_YAKkernel_13
L_YAKkernel_14:
	; >>>>> Line:	82
	; >>>>> --YKISRDepth; 
	dec	word [YKISRDepth]
	; >>>>> Line:	85
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_15
	; >>>>> Line:	87
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_YAKkernel_15:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_13:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_14
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	92
	; >>>>> (in 
	jmp	L_YAKkernel_17
L_YAKkernel_18:
	; >>>>> Line:	95
	; >>>>> YKExitMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	95
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	96
	; >>>>> while(1){ 
	jmp	L_YAKkernel_20
L_YAKkernel_19:
	; >>>>> Line:	98
	; >>>>> ++YKIdleCount; 
	inc	word [YKIdleCount]
L_YAKkernel_20:
	jmp	L_YAKkernel_19
L_YAKkernel_21:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_17:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_18
	ALIGN	2
YKNewTask:
	; >>>>> Line:	106
	; >>>>> void YKNewTask(void* taskFunc, void* taskStack, int priority){ 
	jmp	L_YAKkernel_23
L_YAKkernel_24:
	; >>>>> Line:	109
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKTCBMallocIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBs
	mov	word [bp-2], ax
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	; >>>>> Line:	109
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	110
	; >>>>> ++YKTCBMallocIndex; 
	inc	word [YKTCBMallocIndex]
	; >>>>> Line:	111
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	120
	; >>>>> *(newStackSP) =  64 ; 
	mov	si, word [bp-4]
	mov	word [si], 64
	; >>>>> Line:	121
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	122
	; >>>>> *(newStackSP) = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	123
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	124
	; >>>>> *(newStackSP) = (in 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	125
	; >>>>> newStackSP = newStackSP - 8; 
	mov	ax, word [bp-4]
	sub	ax, 16
	mov	word [bp-4], ax
	; >>>>> Line:	132
	; >>>>> newTask->stackPtr = (int*)newStackSP; 
	mov	si, word [bp-2]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	136
	; >>>>> newTask->priority = priority; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	137
	; >>>>> newTask->next =  0 ; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	138
	; >>>>> newTask->prev =  0 ; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	139
	; >>>>> newTask->delayTicks = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	140
	; >>>>> newTask->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	142
	; >>>>> YKAddToReadyList(newTask); 
	push	word [bp-2]
	call	YKAddToReadyList
	add	sp, 2
	; >>>>> Line:	143
	; >>>>> if (YKIsRunning) 
	mov	ax, word [YKIsRunning]
	test	ax, ax
	je	L_YAKkernel_25
	; >>>>> Line:	144
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_YAKkernel_25:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_23:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_24
	ALIGN	2
YKRun:
	; >>>>> Line:	147
	; >>>>> void YKRun(){ 
	jmp	L_YAKkernel_27
L_YAKkernel_28:
	; >>>>> Line:	151
	; >>>>> YKIsRunning = 1; 
	mov	word [YKIsRunning], 1
	; >>>>> Line:	152
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_27:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_28
	ALIGN	2
YKScheduler:
	; >>>>> Line:	157
	; >>>>> void YKScheduler(){ 
	jmp	L_YAKkernel_30
L_YAKkernel_31:
	; >>>>> Line:	158
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	164
	; >>>>> if (YKReadyTasks != YKCurrentTask){ 
	mov	ax, word [YKCurrentTask]
	cmp	ax, word [YKReadyTasks]
	je	L_YAKkernel_32
	; >>>>> Line:	166
	; >>>>> YKCurrentTask = YKReadyTasks; 
	mov	ax, word [YKReadyTasks]
	mov	word [YKCurrentTask], ax
	; >>>>> Line:	167
	; >>>>> ++YKCtxSwCount; 
	inc	word [YKCtxSwCount]
L_YAKkernel_32:
	; >>>>> Line:	175
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_30:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_31
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	179
	; >>>>> void YKDispatcher(){ 
	jmp	L_YAKkernel_34
L_YAKkernel_35:
	; >>>>> Line:	183
	; >>>>> SwitchContext(); 
	mov	si, word [YKCurrentTask]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	183
	; >>>>> SwitchContext(); 
	call	SwitchContext
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_34:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_35
	ALIGN	2
L_YAKkernel_37:
	DW	0
L_YAKkernel_39:
	DB	0xA,0
L_YAKkernel_38:
	DB	0xA,"Tick ",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	188
	; >>>>> void YKTickHandler(){ 
	jmp	L_YAKkernel_40
L_YAKkernel_41:
	; >>>>> Line:	193
	; >>>>> ++tickCount; 
	mov	ax, word [YKSuspendedTasks]
	mov	word [bp-2], ax
	mov	word [bp-4], 0
	; >>>>> Line:	193
	; >>>>> ++tickCount; 
	inc	word [L_YAKkernel_37]
	; >>>>> Line:	194
	; >>>>> printString("\nTick "); 
	mov	ax, L_YAKkernel_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	195
	; >>>>> printInt(tickCount); 
	push	word [L_YAKkernel_37]
	call	printInt
	add	sp, 2
	; >>>>> Line:	196
	; >>>>> ReadyTask 
	mov	ax, L_YAKkernel_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	199
	; >>>>> while (currTCB !=  0 ){ 
	jmp	L_YAKkernel_43
L_YAKkernel_42:
	; >>>>> Line:	200
	; >>>>> currTCB->delayTicks = currTCB->delayTicks -1 ; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	202
	; >>>>> if (currTCB->delayTicks <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_YAKkernel_45
	; >>>>> Line:	211
	; >>>>> movingTCB = currTCB; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	212
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	214
	; >>>>> YKRemoveFromList(movingTCB); 
	push	word [bp-4]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	215
	; >>>>> YKAddToReadyList(movingTCB); 
	push	word [bp-4]
	call	YKAddToReadyList
	add	sp, 2
	jmp	L_YAKkernel_46
L_YAKkernel_45:
	; >>>>> Line:	218
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_YAKkernel_46:
L_YAKkernel_43:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_YAKkernel_42
L_YAKkernel_44:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_40:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_41
	ALIGN	2
YKAddToReadyList:
	; >>>>> Line:	227
	; >>>>> void YKAddToReadyList(TCBp newTask){ 
	jmp	L_YAKkernel_48
L_YAKkernel_49:
	; >>>>> Line:	231
	; >>>>> if (YKReadyTasks ==  0 ) 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
	mov	ax, word [YKReadyTasks]
	mov	word [bp-4], ax
	; >>>>> Line:	231
	; >>>>> if (YKReadyTasks ==  0 ) 
	mov	ax, word [YKReadyTasks]
	test	ax, ax
	jne	L_YAKkernel_50
	; >>>>> Line:	232
	; >>>>> id YKRemoveFromLis 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_51
L_YAKkernel_50:
	; >>>>> Line:	234
	; >>>>> else if (YKReadyTasks->priority > priority){ 
	mov	si, word [YKReadyTasks]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jge	L_YAKkernel_52
	; >>>>> Line:	235
	; >>>>> newTask->next = YKReadyTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKReadyTasks]
	mov	word [si], ax
	; >>>>> Line:	236
	; >>>>> YKReadyTasks->prev = newTask; 
	mov	si, word [YKReadyTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	237
	; >>>>> YKReadyTasks = newTask; 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_53
L_YAKkernel_52:
	; >>>>> Line:	242
	; >>>>> while (taskListPtr->next !=  0  && taskListPtr->next->priority > priority){ 
	jmp	L_YAKkernel_55
L_YAKkernel_54:
	; >>>>> Line:	243
	; >>>>> taskListPtr = taskListPtr -> next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_YAKkernel_55:
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_57
	mov	si, word [bp-4]
	add	si, 8
	mov	si, word [si]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jl	L_YAKkernel_54
L_YAKkernel_57:
L_YAKkernel_56:
	; >>>>> Line:	246
	; >>>>> newTask-> next = taskListPtr -> next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	247
	; >>>>> taskListPtr->next = newTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
L_YAKkernel_53:
L_YAKkernel_51:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_48:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_49
	ALIGN	2
YKAddToSuspendedList:
	; >>>>> Line:	251
	; >>>>> void YKAddToSuspendedList(TCBp task){ 
	jmp	L_YAKkernel_59
L_YAKkernel_60:
	; >>>>> Line:	252
	; >>>>> task->next = YKSuspendedTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKSuspendedTasks]
	mov	word [si], ax
	; >>>>> Line:	253
	; >>>>> YKSuspendedTasks->prev = task; 
	mov	si, word [YKSuspendedTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	254
	; >>>>> YKSuspendedTasks = task; 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_59:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_60
	ALIGN	2
YKRemoveFromList:
	; >>>>> Line:	258
	; >>>>> ddToSuspendedList(YKCurr 
	jmp	L_YAKkernel_62
L_YAKkernel_63:
	; >>>>> Line:	259
	; >>>>> if (YKReadyTasks == task){ 
	mov	ax, word [bp+4]
	cmp	ax, word [YKReadyTasks]
	jne	L_YAKkernel_64
	; >>>>> Line:	260
	; >>>>> YKReadyTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_65
L_YAKkernel_64:
	; >>>>> Line:	262
	; >>>>> else if (YKSuspendedTasks = task){ 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
	test	ax, ax
	je	L_YAKkernel_66
	; >>>>> Line:	263
	; >>>>> YKSuspendedTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspendedTasks], ax
L_YAKkernel_66:
L_YAKkernel_65:
	; >>>>> Line:	266
	; >>>>> if (task->next !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_67
	; >>>>> Line:	267
	; >>>>> task->next->prev = task->prev; 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_67:
	; >>>>> Line:	269
	; >>>>> if (task->prev !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_68
	; >>>>> Line:	270
	; >>>>> task->prev->next = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_68:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_62:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_63
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	275
	; >>>>> void YKDelayTask(int ticks){ 
	jmp	L_YAKkernel_70
L_YAKkernel_71:
	; >>>>> Line:	276
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	277
	; >>>>> if (ticks > 0){ 
	cmp	word [bp+4], 0
	jle	L_YAKkernel_72
	; >>>>> Line:	281
	; >>>>> YKCurrentTask->delayTicks += ticks; 
	mov	si, word [YKCurrentTask]
	add	si, 6
	mov	ax, word [bp+4]
	add	word [si], ax
L_YAKkernel_72:
	; >>>>> Line:	284
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	285
	; >>>>> YKAddToSuspendedList(YKCurr 
	push	word [YKCurrentTask]
	call	YKAddToSuspendedList
	add	sp, 2
	; >>>>> Line:	288
	; >>>>> asm("int 11h"); 
	int 11h
	; >>>>> Line:	290
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_70:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_71
	ALIGN	2
printCurrentTask:
	; >>>>> Line:	295
	; >>>>> void printCurrentTask(){ 
	jmp	L_YAKkernel_74
L_YAKkernel_75:
	; >>>>> Line:	296
	; >>>>> printTCB(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	printTCB
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_74:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_75
L_YAKkernel_82:
	DB	" ",0xA,0
L_YAKkernel_81:
	DB	"->",0
L_YAKkernel_80:
	DB	")",0
L_YAKkernel_79:
	DB	":0x",0
L_YAKkernel_78:
	DB	"/",0
L_YAKkernel_77:
	DB	"TCB(",0
	ALIGN	2
printTCB:
	; >>>>> Line:	298
	; >>>>> void printTCB(void* ptcb){ 
	jmp	L_YAKkernel_83
L_YAKkernel_84:
	; >>>>> Line:	301
	; >>>>> printString("TCB("); 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	301
	; >>>>> printString("TCB("); 
	mov	ax, L_YAKkernel_77
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	302
	; >>>>> printInt(tcb->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	303
	; >>>>> printString("/"); 
	mov	ax, L_YAKkernel_78
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	304
	; >>>>> printInt(tcb->delayTicks); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	305
	; >>>>> printString(":0x"); 
	mov	ax, L_YAKkernel_79
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	306
	; >>>>> printWord((int)tcb->stackPtr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	307
	; >>>>> printString(")"); 
	mov	ax, L_YAKkernel_80
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	308
	; >>>>> if (tcb->next !=  0 ){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_85
	; >>>>> Line:	309
	; >>>>> printString("->"); 
	mov	ax, L_YAKkernel_81
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	310
	; >>>>> printTCB(tcb->next); 
	mov	si, word [bp-2]
	add	si, 8
	push	word [si]
	call	printTCB
	add	sp, 2
	jmp	L_YAKkernel_86
L_YAKkernel_85:
	; >>>>> Line:	313
	; >>>>> printString(" \n"); 
	mov	ax, L_YAKkernel_82
	push	ax
	call	printString
	add	sp, 2
L_YAKkernel_86:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_83:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_84
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKCurrentTask:
	TIMES	2 db 0
YKReadyTasks:
	TIMES	2 db 0
YKSuspendedTasks:
	TIMES	2 db 0
YKTCBs:
	TIMES	72 db 0
YKTCBMallocIndex:
	TIMES	2 db 0
IdleStack:
	TIMES	200 db 0
YKISRDepth:
	TIMES	2 db 0
YKIsRunning:
	TIMES	2 db 0
