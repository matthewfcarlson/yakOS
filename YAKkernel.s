; Generated by c86 (BYU-NASM) 5.1 (beta) from YAKkernel.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKSemaphoreIndex:
	DW	0
YKQueueIndex:
	DW	0
YKEventGroupIndex:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	78
	; >>>>> void YKInitialize(){ 
	jmp	L_YAKkernel_1
L_YAKkernel_2:
	; >>>>> Line:	79
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	82
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	83
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	84
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	85
	; >>>>> YKReadyTasks =  0 ; 
	mov	word [YKReadyTasks], 0
	; >>>>> Line:	86
	; >>>>> YKSuspendedTasks =  0 ; 
	mov	word [YKSuspendedTasks], 0
	; >>>>> Line:	88
	; >>>>> YKCurrentTask =  0 ; 
	mov	word [YKCurrentTask], 0
	; >>>>> Line:	89
	; >>>>> YKTCBMallocIndex = 0; 
	mov	word [YKTCBMallocIndex], 0
	; >>>>> Line:	90
	; >>>>> YKIsRunning = 0; 
	mov	word [YKIsRunning], 0
	; >>>>> Line:	93
	; >>>>> YKNewTask(YKIdleTask, &IdleStack[ 100 ],255); 
	mov	ax, 255
	push	ax
	mov	ax, (IdleStack+200)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	94
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_1:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_2
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	98
	; >>>>> void YKEnterMutex(){ 
	jmp	L_YAKkernel_4
L_YAKkernel_5:
	; >>>>> Line:	99
	; >>>>> asm("cli"); 
	cli
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_4:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_5
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	103
	; >>>>> void YKExitMutex(){ 
	jmp	L_YAKkernel_7
L_YAKkernel_8:
	; >>>>> Line:	104
	; >>>>> asm("sti"); 
	sti
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_7:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_8
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	108
	; >>>>> void YKEnterISR(){ 
	jmp	L_YAKkernel_10
L_YAKkernel_11:
	; >>>>> Line:	110
	; >>>>> ++YKISRDepth; 
	inc	word [YKISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_10:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_11
	ALIGN	2
YKExitISR:
	; >>>>> Line:	114
	; >>>>> void YKExitISR(){ 
	jmp	L_YAKkernel_13
L_YAKkernel_14:
	; >>>>> Line:	115
	; >>>>> --YKISRDepth; 
	dec	word [YKISRDepth]
	; >>>>> Line:	118
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_15
	; >>>>> Line:	120
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_YAKkernel_15:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_13:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_14
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	125
	; >>>>> void YKIdleTask(){ 
	jmp	L_YAKkernel_17
L_YAKkernel_18:
	; >>>>> Line:	127
	; >>>>> while(1){ 
	jmp	L_YAKkernel_20
L_YAKkernel_19:
	; >>>>> Line:	128
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	130
	; >>>>> ++YKIdleCount; 
	inc	word [YKIdleCount]
	; >>>>> Line:	131
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_YAKkernel_20:
	jmp	L_YAKkernel_19
L_YAKkernel_21:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_17:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_18
	ALIGN	2
YKNewTask:
	; >>>>> Line:	136
	; >>>>> void YKNewTask(void* taskFunc, void* taskStack, int priority){ 
	jmp	L_YAKkernel_23
L_YAKkernel_24:
	; >>>>> Line:	139
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKTCBMallocIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBs
	mov	word [bp-2], ax
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	; >>>>> Line:	139
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	140
	; >>>>> ++YKTCBMallocIndex; 
	inc	word [YKTCBMallocIndex]
	; >>>>> Line:	151
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	152
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	154
	; >>>>> *(newStackS 
	mov	si, word [bp-4]
	mov	word [si], 64
	; >>>>> Line:	155
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	156
	; >>>>> *(newStackSP) = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	157
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	158
	; >>>>> *(newStackSP) = (int)taskFunc; 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	159
	; >>>>> newStackSP = newStackSP - 5; 
	mov	ax, word [bp-4]
	sub	ax, 10
	mov	word [bp-4], ax
	; >>>>> Line:	160
	; >>>>> *(newStackSP) = (int)taskStack; 
	mov	si, word [bp-4]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	161
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	162
	; >>>>> newStackSP = newStackSP - 2; 
	mov	ax, word [bp-4]
	sub	ax, 4
	mov	word [bp-4], ax
	; >>>>> Line:	170
	; >>>>> newTask->stackPtr = (int*)newStackSP; 
	mov	si, word [bp-2]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	174
	; >>>>> newTask->priority = priority; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	175
	; >>>>> newTask->next =  0 ; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	176
	; >>>>> newTask->prev =  0 ; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	177
	; >>>>> newTask->delayTicks = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	178
	; >>>>> newTask->blockReason =  0 ; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	180
	; >>>>> YKAddToReadyList(newTask); 
	push	word [bp-2]
	call	YKAddToReadyList
	add	sp, 2
	; >>>>> Line:	181
	; >>>>> if (YKIsRunning && YKCurrentTask ==   
	mov	ax, word [YKIsRunning]
	test	ax, ax
	je	L_YAKkernel_25
	mov	ax, word [YKCurrentTask]
	test	ax, ax
	jne	L_YAKkernel_25
	; >>>>> Line:	182
	; >>>>> YKScheduler(); 
	call	YKScheduler
	jmp	L_YAKkernel_26
L_YAKkernel_25:
	; >>>>> Line:	183
	; >>>>> else if (YKIsRunning) 
	mov	ax, word [YKIsRunning]
	test	ax, ax
	je	L_YAKkernel_27
	; >>>>> Line:	184
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_27:
L_YAKkernel_26:
	; >>>>> Line:	186
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_23:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_24
	ALIGN	2
YKRun:
	; >>>>> Line:	189
	; >>>>> void YKRun(){ 
	jmp	L_YAKkernel_29
L_YAKkernel_30:
	; >>>>> Line:	193
	; >>>>> YKIsRunning = 1; 
	mov	word [YKIsRunning], 1
	; >>>>> Line:	194
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_29:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_30
	ALIGN	2
YKScheduler:
	; >>>>> Line:	199
	; >>>>> void YKScheduler(){ 
	jmp	L_YAKkernel_32
L_YAKkernel_33:
	; >>>>> Line:	200
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	201
	; >>>>> if (!YKIsRunning) return; 
	mov	ax, word [YKIsRunning]
	test	ax, ax
	jne	L_YAKkernel_34
	; >>>>> Line:	201
	; >>>>> if (!YKIsRunning) return; 
	jmp	L_YAKkernel_35
L_YAKkernel_34:
	; >>>>> Line:	203
	; >>>>> if (YKReadyTasks != YKCurrentTask){ 
	mov	ax, word [YKCurrentTask]
	cmp	ax, word [YKReadyTasks]
	je	L_YAKkernel_36
	; >>>>> Line:	208
	; >>>>> YKCurrentTask = YKReadyTasks; 
	mov	ax, word [YKReadyTasks]
	mov	word [YKCurrentTask], ax
	; >>>>> Line:	209
	; >>>>> ++YKCtxSwCount; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	215
	; >>>>>  
	call	YKDispatcher
L_YAKkernel_36:
L_YAKkernel_35:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_32:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_33
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	222
	; >>>>> void YKDispatcher(){ 
	jmp	L_YAKkernel_38
L_YAKkernel_39:
	; >>>>> Line:	226
	; >>>>> SwitchContext(); 
	mov	si, word [YKCurrentTask]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	226
	; >>>>> SwitchContext(); 
	call	SwitchContext
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_38:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_39
	ALIGN	2
YKAddToReadyList:
	; >>>>> Line:	232
	; >>>>> void YKAddToReadyList(TCBp newTask){ 
	jmp	L_YAKkernel_41
L_YAKkernel_42:
	; >>>>> Line:	236
	; >>>>> if (YKReadyTasks ==  0 ){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
	mov	ax, word [YKReadyTasks]
	mov	word [bp-4], ax
	; >>>>> Line:	236
	; >>>>> if (YKReadyTasks ==  0 ){ 
	mov	ax, word [YKReadyTasks]
	test	ax, ax
	jne	L_YAKkernel_43
	; >>>>> Line:	237
	; >>>>> YKReadyTasks = newTask; 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_44
L_YAKkernel_43:
	; >>>>> Line:	240
	; >>>>> else if (YKReadyTasks->priority > newPriority){ 
	mov	si, word [YKReadyTasks]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jge	L_YAKkernel_45
	; >>>>> Line:	241
	; >>>>> newTask->next = YKReadyTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKReadyTasks]
	mov	word [si], ax
	; >>>>> Line:	242
	; >>>>> YKReadyTasks->prev = newTask; 
	mov	si, word [YKReadyTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	243
	; >>>>> YKReadyTasks = newTask; 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_46
L_YAKkernel_45:
	; >>>>> Line:	247
	; >>>>> while (taskListPtr->next !=  0  && taskListPtr->priority < newPriority){ 
	jmp	L_YAKkernel_48
L_YAKkernel_47:
	; >>>>> Line:	248
	; >>>>> 0 ){ 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_YAKkernel_48:
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_50
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jg	L_YAKkernel_47
L_YAKkernel_50:
L_YAKkernel_49:
	; >>>>> Line:	251
	; >>>>> if (taskListPtr->priority < newPriority){ 
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jle	L_YAKkernel_51
	; >>>>> Line:	252
	; >>>>> newTask->next = taskListPtr->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	253
	; >>>>> taskListPtr->next = newTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	254
	; >>>>> newTask->prev = taskListPtr; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	255
	; >>>>> if (newTask->next !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_52
	; >>>>> Line:	256
	; >>>>> newTask->next->prev = newTask; 
	mov	si, word [bp+4]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
L_YAKkernel_52:
	jmp	L_YAKkernel_53
L_YAKkernel_51:
	; >>>>> Line:	261
	; >>>>> newTask->prev = taskListPtr->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	262
	; >>>>> if (taskListPtr->prev !=  0 ) 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_54
	; >>>>> Line:	263
	; >>>>> taskListPtr->prev->next = newTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
L_YAKkernel_54:
	; >>>>> Line:	264
	; >>>>> taskListPtr->prev = newTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	265
	; >>>>> newTask->next = taskListPtr; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_YAKkernel_53:
L_YAKkernel_46:
L_YAKkernel_44:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_41:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_42
	ALIGN	2
YKAddToSuspendedList:
	; >>>>> Line:	270
	; >>>>> void YKAddToSuspendedList(TCBp task){ 
	jmp	L_YAKkernel_56
L_YAKkernel_57:
	; >>>>> Line:	272
	; >>>>> if (YKSuspendedTasks ==  0 ){ 
	mov	ax, word [YKSuspendedTasks]
	test	ax, ax
	jne	L_YAKkernel_58
	; >>>>> Line:	273
	; >>>>> task 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
	; >>>>> Line:	274
	; >>>>> task->next =  0 ; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	275
	; >>>>> task->next =  0 ; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_YAKkernel_59
L_YAKkernel_58:
	; >>>>> Line:	278
	; >>>>> task->prev =  0 ; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	279
	; >>>>> task->next = YKSuspendedTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKSuspendedTasks]
	mov	word [si], ax
	; >>>>> Line:	280
	; >>>>> YKSuspendedTasks->prev = task; 
	mov	si, word [YKSuspendedTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	281
	; >>>>> YKSuspendedTasks = task; 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
L_YAKkernel_59:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_56:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_57
	ALIGN	2
YKRemoveFromList:
	; >>>>> Line:	288
	; >>>>> void YKRemoveFromList(TCBp task){ 
	jmp	L_YAKkernel_61
L_YAKkernel_62:
	; >>>>> Line:	290
	; >>>>> if (YKReadyTasks == task){ 
	mov	ax, word [bp+4]
	cmp	ax, word [YKReadyTasks]
	jne	L_YAKkernel_63
	; >>>>> Line:	291
	; >>>>> YKReadyTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_64
L_YAKkernel_63:
	; >>>>> Line:	293
	; >>>>> else if (YKSuspendedTasks == task){ 
	mov	ax, word [bp+4]
	cmp	ax, word [YKSuspendedTasks]
	jne	L_YAKkernel_65
	; >>>>> Line:	294
	; >>>>> YKSuspendedTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspendedTasks], ax
L_YAKkernel_65:
L_YAKkernel_64:
	; >>>>> Line:	297
	; >>>>> if (task->next !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_66
	; >>>>> Line:	298
	; >>>>> task->next->prev = task->prev; 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_66:
	; >>>>> Line:	300
	; >>>>> if (task->prev !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_67
	; >>>>> Line:	301
	; >>>>> task->prev->next = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_67:
	; >>>>> Line:	304
	; >>>>> task->prev =  0 ; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	305
	; >>>>> layTask( 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_61:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_62
	ALIGN	2
YKUpdateSuspendedTasks:
	; >>>>> Line:	310
	; >>>>> void YKUpdateSuspendedTasks(){ 
	jmp	L_YAKkernel_69
L_YAKkernel_70:
	; >>>>> Line:	315
	; >>>>> while (currTCB !=  0 ){ 
	mov	ax, word [YKSuspendedTasks]
	mov	word [bp-2], ax
	mov	word [bp-4], 0
	; >>>>> Line:	315
	; >>>>> while (currTCB !=  0 ){ 
	jmp	L_YAKkernel_72
L_YAKkernel_71:
	; >>>>> Line:	316
	; >>>>> currTCB->delayTicks = currTCB->delayTicks -1 ; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	318
	; >>>>> if (currTCB->delayTicks <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_YAKkernel_74
	; >>>>> Line:	327
	; >>>>> movingTCB = currTCB; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	328
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	329
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	330
	; >>>>> YKRemoveFromList(movingTCB); 
	push	word [bp-4]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	331
	; >>>>> YKAddToReadyList(movingTCB); 
	push	word [bp-4]
	call	YKAddToReadyList
	add	sp, 2
	; >>>>> Line:	332
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	jmp	L_YAKkernel_75
L_YAKkernel_74:
	; >>>>> Line:	335
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_YAKkernel_75:
L_YAKkernel_72:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_YAKkernel_71
L_YAKkernel_73:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_69:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_70
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	343
	; >>>>> itHub/yakOS/YA 
	jmp	L_YAKkernel_77
L_YAKkernel_78:
	; >>>>> Line:	344
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	345
	; >>>>> if (ticks > 0){ 
	cmp	word [bp+4], 0
	jle	L_YAKkernel_79
	; >>>>> Line:	353
	; >>>>> YKCurrentTask->delayTicks += ticks; 
	mov	si, word [YKCurrentTask]
	add	si, 6
	mov	ax, word [bp+4]
	add	word [si], ax
L_YAKkernel_79:
	; >>>>> Line:	356
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	357
	; >>>>> YKAddToSuspendedList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKAddToSuspendedList
	add	sp, 2
	; >>>>> Line:	360
	; >>>>> asm("int 11h"); 
	int 11h
	; >>>>> Line:	362
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_77:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_78
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	366
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_YAKkernel_81
L_YAKkernel_82:
	; >>>>> Line:	368
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKSemaphoreIndex]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSemaphores
	mov	word [bp-2], ax
	; >>>>> Line:	368
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	369
	; >>>>> newSem->count = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	370
	; >>>>> newSem->tasks =  0 ; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	371
	; >>>>> ++YKSemaphoreIndex; 
	inc	word [YKSemaphoreIndex]
	; >>>>> Line:	379
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	380
	; >>>>> return newSem; 
	mov	ax, word [bp-2]
L_YAKkernel_83:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_81:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_82
	ALIGN	2
YKSemPend:
	; >>>>> Line:	382
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_YAKkernel_85
L_YAKkernel_86:
	; >>>>> Line:	383
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	390
	; >>>>> if (semaphore->count > 0){ 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_YAKkernel_87
	; >>>>> Line:	391
	; >>>>> --(semaphore->count); 
	dec	word [si]
	; >>>>> Line:	392
	; >>>>> return; 
	jmp	L_YAKkernel_88
L_YAKkernel_87:
	; >>>>> Line:	398
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	399
	; >>>>> YKCurrentTask->next = semaphore->tasks; 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [YKCurrentTask]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	400
	; >>>>> semaphore->tasks = YKCurrentTask; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [YKCurrentTask]
	mov	word [si], ax
	; >>>>> Line:	403
	; >>>>> if (YKISRDepth == 0) 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_89
	; >>>>> Line:	404
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_89:
	; >>>>> Line:	406
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_YAKkernel_88:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_85:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_86
	ALIGN	2
YKSemPost:
	; >>>>> Line:	409
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_YAKkernel_91
L_YAKkernel_92:
	; >>>>> Line:	412
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	420
	; >>>>> ++(semaphore->count); 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	422
	; >>>>> currTask = semaphore->tasks; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	423
	; >>>>> if (currTask !=  0 ) 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_YAKkernel_93
	; >>>>> Line:	424
	; >>>>> --(semaphore->count); 
	mov	si, word [bp+4]
	dec	word [si]
L_YAKkernel_93:
	; >>>>> Line:	426
	; >>>>> while (currTask !=  0  && currTask != currTask->next){ 
	jmp	L_YAKkernel_95
L_YAKkernel_94:
	; >>>>> Line:	427
	; >>>>> addTask = currTask; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	428
	; >>>>> currTask = currTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	429
	; >>>>> YKAddToReadyList(addTask); 
	push	word [bp-4]
	call	YKAddToReadyList
	add	sp, 2
L_YAKkernel_95:
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_YAKkernel_97
	mov	si, word [bp-2]
	add	si, 8
	cmp	ax, word [si]
	jne	L_YAKkernel_94
L_YAKkernel_97:
L_YAKkernel_96:
	; >>>>> Line:	431
	; >>>>> semaphore->tasks =  0 ; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	432
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_98
	; >>>>> Line:	433
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_98:
	; >>>>> Line:	435
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_91:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_92
	ALIGN	2
YKQCreate:
	; >>>>> Line:	443
	; >>>>> YKQ* YKQCreate(void **start, unsigned size){ 
	jmp	L_YAKkernel_100
L_YAKkernel_101:
	; >>>>> Line:	445
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKQueueIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKQueues
	mov	word [bp-2], ax
	; >>>>> Line:	445
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	446
	; >>>>> queue->head = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
	; >>>>> Line:	447
	; >>>>> queue->tail = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	448
	; >>>>> queue->size = size; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	449
	; >>>>> queue->length = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	450
	; >>>>> queue->queue = start; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	451
	; >>>>> ++YKQueueIndex; 
	inc	word [YKQueueIndex]
	; >>>>> Line:	452
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	453
	; >>>>> return (void*)queue; 
	mov	ax, word [bp-2]
L_YAKkernel_102:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_100:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_101
L_YAKkernel_108:
	DB	"Returning Message: 0x",0
L_YAKkernel_107:
	DB	0xA,0xA,"ERROR: CANNOT SWITCH TASK SINCE IN ISR------------------------",0xA,0xA,0
L_YAKkernel_106:
	DB	0xA,0xA,"ERROR: TWO TASKS ARE WAITING ON THE SAME QUEUE.----------------------",0xA,0xA,0
L_YAKkernel_105:
	DB	"Delaying current Task for Queue",0xA,0
L_YAKkernel_104:
	DB	"Pending on Queue",0xA,0
	ALIGN	2
YKQPend:
	; >>>>> Line:	459
	; >>>>> void* YKQPend(YKQ *queue){ 
	jmp	L_YAKkernel_109
L_YAKkernel_110:
	; >>>>> Line:	464
	; >>>>> printString("Pending on Queue\n"); 
	mov	ax, word [bp+4]
	mov	word [bp-4], ax
	; >>>>> Line:	464
	; >>>>> printString("Pending on Queue\n"); 
	mov	ax, L_YAKkernel_104
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	465
	; >>>>> printQueue(messQ); 
	push	word [bp-4]
	call	printQueue
	add	sp, 2
	; >>>>> Line:	468
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	470
	; >>>>> if (messQ->length == 0 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_YAKkernel_111
	; >>>>> Line:	472
	; >>>>> printString("Delaying current Task for Queue\n"); 
	mov	ax, L_YAKkernel_105
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	476
	; >>>>> if (messQ->tasks !=  0 ){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_112
	; >>>>> Line:	477
	; >>>>> printString("\n\nERROR: TWO TASKS ARE WAITING ON THE SAME QUEUE.----------------------\n\n"); 
	mov	ax, L_YAKkernel_106
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	478
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
L_YAKkernel_112:
	; >>>>> Line:	482
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	484
	; >>>>> YKCurrentTask->next = messQ->tasks; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [YKCurrentTask]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	485
	; >>>>> messQ->tasks = YKCurrentTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [YKCurrentTask]
	mov	word [si], ax
	; >>>>> Line:	486
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_113
	; >>>>> Line:	488
	; >>>>> asm("int 11h"); 
	int 11h
	jmp	L_YAKkernel_114
L_YAKkernel_113:
	; >>>>> Line:	492
	; >>>>> printString("\n\nERROR: CANNOT SWITCH TASK SINCE IN ISR------------------------\n\n"); 
	mov	ax, L_YAKkernel_107
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	493
	; >>>>> exit(6); 
	mov	al, 6
	push	ax
	call	exit
	add	sp, 2
L_YAKkernel_114:
L_YAKkernel_111:
	; >>>>> Line:	496
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	498
	; >>>>> YKEnterMutex( 
	call	YKEnterMutex
	; >>>>> Line:	501
	; >>>>> messQ->length = messQ->length - 1; 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-4]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	504
	; >>>>> message = messQ->queue[messQ->head]; 
	mov	si, word [bp-4]
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-4]
	add	di, 8
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	507
	; >>>>> ++(messQ->head); 
	mov	si, word [bp-4]
	inc	word [si]
	; >>>>> Line:	508
	; >>>>> if (messQ->head == messQ->size ) 
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_YAKkernel_115
	; >>>>> Line:	509
	; >>>>> messQ->head = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
L_YAKkernel_115:
	; >>>>> Line:	512
	; >>>>> printString("Returning Message: 0x"); 
	mov	ax, L_YAKkernel_108
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	513
	; >>>>> printWord((int)message); 
	push	word [bp-2]
	call	printWord
	add	sp, 2
	; >>>>> Line:	514
	; >>>>> printString("\n"); 
	mov	ax, (L_YAKkernel_104+16)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	515
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	518
	; >>>>> return message; 
	mov	ax, word [bp-2]
L_YAKkernel_116:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_109:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_110
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKCurrentTask:
	TIMES	2 db 0
YKReadyTasks:
	TIMES	2 db 0
YKSuspendedTasks:
	TIMES	2 db 0
YKTCBs:
	TIMES	72 db 0
YKTCBMallocIndex:
	TIMES	2 db 0
YKSemaphores:
	TIMES	20 db 0
IdleStack:
	TIMES	200 db 0
YKQueues:
	TIMES	60 db 0
YKEventGroupList:
	TIMES	20 db 0
YKISRDepth:
	TIMES	2 db 0
YKIsRunning:
	TIMES	2 db 0
