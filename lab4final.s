        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      ResetISR ; Reset               ; Int 08h (IRQ 0)
        dd      TickISR  ; Tick                ; Int 09h (IRQ 1)
        dd      KeyboardISR ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      SwitchTaskISR           ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84


TickISR:
	cli				;this is atomic so no more interrupts for a bit
	
	
	;TODO: create a function that pushes and pops context in the same way
	push ax
	push bx
	push dx
	push si
	push di
	push bp
	push es
	push ds
	
	mov	ax, word [YKISRDepth]
	test	ax, 0
	jne TickISRSaved
						;save the SP on the TCB since we are call depth zero
	mov si, word [YKCurrentTask]
	mov [si],sp			;move sp (the first variable) to the TCB
	TickISRSaved:
						
	call YKEnterISR		;enter the ISR
	sti 				;turn interupts back on
						;call the tick handler to handle the interrupt
	call YKTickHandler 

	cli 				; Turn off interrupts
						; Reset the PIC before we pop registers
	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)

	call YKExitISR		; exit the ISR	
	
	;Restore registers
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax	
	
	sti 	;return interrupts back on
	iret 	;return from interrupt
	
ResetISR:
	cli
	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)
	mov ax, 3h
	push ax
	call exit;
	
KeyboardISR:
	cli
	push ax
	push bx
	push dx
	push si
	push di
	push bp
	push es
	push ds
	
	call YKEnterISR
	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)
	call YKExitISR
	
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax
	sti;
	
	iret

;ISR for the software generated interrupts
SwitchTaskISR:
	cli				;this is atomic so no more interrupts for a bit
	
	;TODO save the SP to the current task TCB
	;TODO: create a function that pushes and pops context in the same way
	push ax
	push bx
	push dx
	push si
	push di
	push bp
	push es
	push ds
	
	;Save the current SP on the TCB
	mov si, word [YKCurrentTask]
	mov [si],sp			;move sp to the TCB

	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)
	
	call printCurrentTask;
	;Call the scheduler
	call YKScheduler;
	jmp main			; this should never be called
	
	
SaveSPtoTCB:	
						;Save the current SP on the TCB
	mov si, word [YKCurrentTask]
	mov ax, sp			;move sp to the ax
	add ax, 2h			;add 4. 2 for the call to EnterISR, 2 for the call to save SPtoTCB
	mov [si], ax		;move the SP to the TCB
	
	ret					;return
	

;This function is callewd by the dispatcher to swtich to the current task
SwitchContext:
	;we put the address we need in a local variable in YKDispatch
	mov sp, [bp-2] ;this is the stack pointer
	mov bp, sp ;set the basepointer accordingly - we are going to pop it soon
	add bp, 18 ;for debugging purposes
	
	;next pop all the registers
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax
	
RestoreContext:
	;This will pop the next three registers: IP, CS, and flags
	iret;
	; Generated by c86 (BYU-NASM) 5.1 (beta) from YAKkernel.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKInitialize:
	; >>>>> Line:	43
	; >>>>> YKExitMutex(); 
	jmp	L_YAKkernel_1
L_YAKkernel_2:
	; >>>>> Line:	44
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	47
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	48
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	49
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	50
	; >>>>> YKReadyTasks =  0 ; 
	mov	word [YKReadyTasks], 0
	; >>>>> Line:	51
	; >>>>> YKSuspendedTasks =  0 ; 
	mov	word [YKSuspendedTasks], 0
	; >>>>> Line:	53
	; >>>>> YKCurrentTask =  0 ; 
	mov	word [YKCurrentTask], 0
	; >>>>> Line:	54
	; >>>>> YKTCBMallocIndex = 0; 
	mov	word [YKTCBMallocIndex], 0
	; >>>>> Line:	55
	; >>>>> YKIsRunning = 0; 
	mov	word [YKIsRunning], 0
	; >>>>> Line:	58
	; >>>>> YKNewTask(YKIdleTask, &IdleStack[ 100 ],255); 
	mov	ax, 255
	push	ax
	mov	ax, (IdleStack+200)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	59
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_1:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_2
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	63
	; >>>>> void YKEnterMutex(){ 
	jmp	L_YAKkernel_4
L_YAKkernel_5:
	; >>>>> Line:	64
	; >>>>> asm("cli"); 
	cli
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_4:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_5
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	68
	; >>>>> void YKExitMutex(){ 
	jmp	L_YAKkernel_7
L_YAKkernel_8:
	; >>>>> Line:	69
	; >>>>> asm("sti"); 
	sti
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_7:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_8
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	73
	; >>>>> void YKEnterISR(){ 
	jmp	L_YAKkernel_10
L_YAKkernel_11:
	; >>>>> Line:	75
	; >>>>> ++YKISRDepth; 
	inc	word [YKISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_10:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_11
	ALIGN	2
YKExitISR:
	; >>>>> Line:	79
	; >>>>> void YKExitISR(){ 
	jmp	L_YAKkernel_13
L_YAKkernel_14:
	; >>>>> Line:	80
	; >>>>> --YKISRDepth; 
	dec	word [YKISRDepth]
	; >>>>> Line:	83
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_15
	; >>>>> Line:	85
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_YAKkernel_15:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_13:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_14
L_YAKkernel_17:
	DB	"Idling...",0xA,0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	90
	; >>>>> void YKIdleTask(){ 
	jmp	L_YAKkernel_18
L_YAKkernel_19:
	; >>>>> Line:	93
	; >>>>> YKExitMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	93
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	94
	; >>>>> while(1) 
	jmp	L_YAKkernel_21
L_YAKkernel_20:
	; >>>>> Line:	95
	; >>>>> for (i = 0; i< 1000; i++); 
	mov	word [bp-2], 0
	jmp	L_YAKkernel_24
L_YAKkernel_23:
L_YAKkernel_26:
	inc	word [bp-2]
L_YAKkernel_24:
	cmp	word [bp-2], 1000
	jl	L_YAKkernel_23
L_YAKkernel_25:
	; >>>>> Line:	96
	; >>>>> ++YKIdleCount; 
	inc	word [YKIdleCount]
	; >>>>> Line:	98
	; >>>>> printString("Idling...\n"); 
	mov	ax, L_YAKkernel_17
	push	ax
	call	printString
	add	sp, 2
L_YAKkernel_21:
	jmp	L_YAKkernel_20
L_YAKkernel_22:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_18:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_19
L_YAKkernel_29:
	DB	0xA,"SP at 0x",0
L_YAKkernel_28:
	DB	0xA,"BP at 0x",0
	ALIGN	2
YKNewTask:
	; >>>>> Line:	104
	; >>>>> void YKNewTask(void* taskFunc, void* taskStack, int priority){ 
	jmp	L_YAKkernel_30
L_YAKkernel_31:
	; >>>>> Line:	107
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKTCBMallocIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBs
	mov	word [bp-2], ax
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	; >>>>> Line:	107
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	108
	; >>>>> ++YKTCBMallocIndex; 
	inc	word [YKTCBMallocIndex]
	; >>>>> Line:	109
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	112
	; >>>>> printString("\nBP at 0x"); 
	mov	ax, L_YAKkernel_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	113
	; >>>>> printWord((int)taskStack); 
	push	word [bp+6]
	call	printWord
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> *(newStackSP) =  64 ; 
	mov	si, word [bp-4]
	mov	word [si], 64
	; >>>>> Line:	119
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	120
	; >>>>> *(newStackSP) = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	121
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	122
	; >>>>> *(newStackSP) = (int)taskFunc; 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	123
	; >>>>> newStackSP = newStackSP - 8; 
	mov	ax, word [bp-4]
	sub	ax, 16
	mov	word [bp-4], ax
	; >>>>> Line:	126
	; >>>>> printString("\nSP at 0x"); 
	mov	ax, L_YAKkernel_29
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	127
	; >>>>>  
	push	word [bp-4]
	call	printWord
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> newTask->stackPtr = (int*)newStackSP; 
	mov	si, word [bp-2]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	134
	; >>>>> newTask->priority = priority; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	135
	; >>>>> newTask->next =  0 ; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	136
	; >>>>> newTask->prev =  0 ; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	137
	; >>>>> newTask->delayTicks = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	138
	; >>>>> newTask->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	140
	; >>>>> YKAddToReadyList(newTask); 
	push	word [bp-2]
	call	YKAddToReadyList
	add	sp, 2
	; >>>>> Line:	141
	; >>>>> if (YKIsRunning) 
	mov	ax, word [YKIsRunning]
	test	ax, ax
	je	L_YAKkernel_32
	; >>>>> Line:	142
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_YAKkernel_32:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_30:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_31
L_YAKkernel_34:
	DB	"Starting Yak OS (c) 2015",0xA,0
	ALIGN	2
YKRun:
	; >>>>> Line:	145
	; >>>>> void YKRun(){ 
	jmp	L_YAKkernel_35
L_YAKkernel_36:
	; >>>>> Line:	147
	; >>>>> printString("Starting Yak OS (c) 2015\n"); 
	mov	ax, L_YAKkernel_34
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	149
	; >>>>> YKIsRunning = 1; 
	mov	word [YKIsRunning], 1
	; >>>>> Line:	150
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_35:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_36
L_YAKkernel_39:
	DB	"Switching context to task#",0
L_YAKkernel_38:
	DB	"Scheduler",0xA,0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	155
	; >>>>> void YKScheduler(){ 
	jmp	L_YAKkernel_40
L_YAKkernel_41:
	; >>>>> Line:	156
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	158
	; >>>>> printString("Scheduler\n"); 
	mov	ax, L_YAKkernel_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> printTCB(YKReadyTasks); 
	push	word [YKReadyTasks]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	162
	; >>>>> if (YKReadyTasks != YKCurrentTask){ 
	mov	ax, word [YKCurrentTask]
	cmp	ax, word [YKReadyTasks]
	je	L_YAKkernel_42
	; >>>>> Line:	164
	; >>>>> YKCurrentTask = YK 
	mov	ax, word [YKReadyTasks]
	mov	word [YKCurrentTask], ax
	; >>>>> Line:	165
	; >>>>> ++YKCtxSwCount; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	167
	; >>>>> printString("Switching context to task#"); 
	mov	ax, L_YAKkernel_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	168
	; >>>>> printInt(YKCurrentTask->priority); 
	mov	si, word [YKCurrentTask]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	169
	; >>>>> printString("\n"); 
	mov	ax, (L_YAKkernel_17+9)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	171
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
L_YAKkernel_42:
	; >>>>> Line:	173
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_40:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_41
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	177
	; >>>>> void YKDispatcher(){ 
	jmp	L_YAKkernel_44
L_YAKkernel_45:
	; >>>>> Line:	181
	; >>>>> SwitchContext(); 
	mov	si, word [YKCurrentTask]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	181
	; >>>>> SwitchContext(); 
	call	SwitchContext
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_44:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_45
	ALIGN	2
L_YAKkernel_47:
	DW	0
L_YAKkernel_50:
	DB	" back to the ready list",0xA,0
L_YAKkernel_49:
	DB	"Adding task #",0
L_YAKkernel_48:
	DB	0xA,"Tick ",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	186
	; >>>>> void YKTickHandler(){ 
	jmp	L_YAKkernel_51
L_YAKkernel_52:
	; >>>>> Line:	191
	; >>>>> ++tickCount; 
	mov	ax, word [YKSuspendedTasks]
	mov	word [bp-2], ax
	mov	word [bp-4], 0
	; >>>>> Line:	191
	; >>>>> ++tickCount; 
	inc	word [L_YAKkernel_47]
	; >>>>> Line:	192
	; >>>>> printString("\nTick "); 
	mov	ax, L_YAKkernel_48
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	193
	; >>>>> printInt(tickCount); 
	push	word [L_YAKkernel_47]
	call	printInt
	add	sp, 2
	; >>>>> Line:	194
	; >>>>> printString("\n"); 
	mov	ax, (L_YAKkernel_17+9)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	197
	; >>>>> while (currTCB !=  0 ){ 
	jmp	L_YAKkernel_54
L_YAKkernel_53:
	; >>>>> Line:	198
	; >>>>> currTCB->delayTicks = currTCB->de 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	200
	; >>>>> if (currTCB->delayTicks <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_YAKkernel_56
	; >>>>> Line:	202
	; >>>>> printString("Adding task #"); 
	mov	ax, L_YAKkernel_49
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	203
	; >>>>> printInt(currTCB->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	204
	; >>>>> printString(" back to the ready list\n"); 
	mov	ax, L_YAKkernel_50
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	207
	; >>>>> movingTCB = currTCB; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	208
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	210
	; >>>>> YKRemoveFromList(movingTCB); 
	push	word [bp-4]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	211
	; >>>>> YKAddToReadyList(movingTCB); 
	push	word [bp-4]
	call	YKAddToReadyList
	add	sp, 2
	jmp	L_YAKkernel_57
L_YAKkernel_56:
	; >>>>> Line:	214
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_YAKkernel_57:
L_YAKkernel_54:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_YAKkernel_53
L_YAKkernel_55:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_51:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_52
	ALIGN	2
YKAddToReadyList:
	; >>>>> Line:	223
	; >>>>> void YKAddToReadyList(TCBp newTask){ 
	jmp	L_YAKkernel_59
L_YAKkernel_60:
	; >>>>> Line:	227
	; >>>>> if (YKReadyTasks ==  0 ) 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
	mov	ax, word [YKReadyTasks]
	mov	word [bp-4], ax
	; >>>>> Line:	227
	; >>>>> if (YKReadyTasks ==  0 ) 
	mov	ax, word [YKReadyTasks]
	test	ax, ax
	jne	L_YAKkernel_61
	; >>>>> Line:	228
	; >>>>> YKReadyTasks = newTask; 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_62
L_YAKkernel_61:
	; >>>>> Line:	230
	; >>>>> else if (YKReadyTas 
	mov	si, word [YKReadyTasks]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jge	L_YAKkernel_63
	; >>>>> Line:	231
	; >>>>> newTask->next = YKReadyTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKReadyTasks]
	mov	word [si], ax
	; >>>>> Line:	232
	; >>>>> YKReadyTasks->prev = newTask; 
	mov	si, word [YKReadyTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	233
	; >>>>> YKReadyTasks = newTask; 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_64
L_YAKkernel_63:
	; >>>>> Line:	238
	; >>>>> while (taskListPtr->next !=  0  && taskListPtr->next->priority > priority){ 
	jmp	L_YAKkernel_66
L_YAKkernel_65:
	; >>>>> Line:	239
	; >>>>> taskListPtr = taskListPtr -> next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_YAKkernel_66:
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_68
	mov	si, word [bp-4]
	add	si, 8
	mov	si, word [si]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jl	L_YAKkernel_65
L_YAKkernel_68:
L_YAKkernel_67:
	; >>>>> Line:	242
	; >>>>> newTask-> next = taskListPtr -> next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	243
	; >>>>> taskListPtr->next = newTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
L_YAKkernel_64:
L_YAKkernel_62:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_59:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_60
	ALIGN	2
YKAddToSuspendedList:
	; >>>>> Line:	247
	; >>>>> void YKAddToSuspendedList(TCBp task){ 
	jmp	L_YAKkernel_70
L_YAKkernel_71:
	; >>>>> Line:	248
	; >>>>> task->next = YKSuspendedTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKSuspendedTasks]
	mov	word [si], ax
	; >>>>> Line:	249
	; >>>>> YKSuspendedTasks->prev = task; 
	mov	si, word [YKSuspendedTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	250
	; >>>>> YKSuspendedTasks = task; 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_70:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_71
	ALIGN	2
YKRemoveFromList:
	; >>>>> Line:	254
	; >>>>> void YKRemoveFromList(TCBp task){ 
	jmp	L_YAKkernel_73
L_YAKkernel_74:
	; >>>>> Line:	255
	; >>>>> if (YKReadyTasks == 
	mov	ax, word [bp+4]
	cmp	ax, word [YKReadyTasks]
	jne	L_YAKkernel_75
	; >>>>> Line:	256
	; >>>>> YKReadyTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_76
L_YAKkernel_75:
	; >>>>> Line:	258
	; >>>>> else if (YKSuspendedTasks = task){ 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
	test	ax, ax
	je	L_YAKkernel_77
	; >>>>> Line:	259
	; >>>>> YKSuspendedTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspendedTasks], ax
L_YAKkernel_77:
L_YAKkernel_76:
	; >>>>> Line:	262
	; >>>>> if (task->next !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_78
	; >>>>> Line:	263
	; >>>>> task->next->prev = task->prev; 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_78:
	; >>>>> Line:	265
	; >>>>> if (task->prev !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_79
	; >>>>> Line:	266
	; >>>>> task->prev->next = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_79:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_73:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_74
L_YAKkernel_83:
	DB	"Calling Software delay interrupt",0xA,0
L_YAKkernel_82:
	DB	"Current Ready Tasks:",0xA,0
L_YAKkernel_81:
	DB	"Delaying",0xA,0xA,0
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	271
	; >>>>> void YKDelayTask(int ticks){ 
	jmp	L_YAKkernel_84
L_YAKkernel_85:
	; >>>>> Line:	272
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	273
	; >>>>> if (ticks > 0){ 
	cmp	word [bp+4], 0
	jle	L_YAKkernel_86
	; >>>>> Line:	275
	; >>>>> printString("Delaying\n\n"); 
	mov	ax, L_YAKkernel_81
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	277
	; >>>>> YKCurrentTask->delayTicks += ticks; 
	mov	si, word [YKCurrentTask]
	add	si, 6
	mov	ax, word [bp+4]
	add	word [si], ax
L_YAKkernel_86:
	; >>>>> Line:	279
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	280
	; >>>>> YKAddToSuspendedList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKAddToSuspendedList
	add	sp, 2
	; >>>>> Line:	282
	; >>>>> printString("Current Ready Tasks:\n"); 
	mov	ax, L_YAKkernel_82
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	283
	; >>>>> printTCB(YKReadyTasks) 
	push	word [YKReadyTasks]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	284
	; >>>>> printString("Calling Software delay interrupt\n"); 
	mov	ax, L_YAKkernel_83
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	287
	; >>>>> asm("int 11h"); 
	int 11h
	; >>>>> Line:	289
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_84:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_85
	ALIGN	2
printCurrentTask:
	; >>>>> Line:	294
	; >>>>> void printCurrentTask(){ 
	jmp	L_YAKkernel_88
L_YAKkernel_89:
	; >>>>> Line:	295
	; >>>>> printTCB(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	printTCB
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_88:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_89
L_YAKkernel_96:
	DB	" ",0xA,0
L_YAKkernel_95:
	DB	"->",0
L_YAKkernel_94:
	DB	")",0
L_YAKkernel_93:
	DB	":0x",0
L_YAKkernel_92:
	DB	"/",0
L_YAKkernel_91:
	DB	"TCB(",0
	ALIGN	2
printTCB:
	; >>>>> Line:	297
	; >>>>> void printTCB(void* ptcb){ 
	jmp	L_YAKkernel_97
L_YAKkernel_98:
	; >>>>> Line:	300
	; >>>>> printString("TCB("); 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	300
	; >>>>> printString("TCB("); 
	mov	ax, L_YAKkernel_91
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	301
	; >>>>> printInt(tcb->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	302
	; >>>>> printString("/"); 
	mov	ax, L_YAKkernel_92
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	303
	; >>>>> printInt(tcb->delayTicks); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	304
	; >>>>> printString(":0x"); 
	mov	ax, L_YAKkernel_93
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	305
	; >>>>> printWord((int)tcb->stackPtr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	306
	; >>>>> printString(")"); 
	mov	ax, L_YAKkernel_94
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	307
	; >>>>> if (tcb->next !=  0 ){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_99
	; >>>>> Line:	308
	; >>>>> printString("->"); 
	mov	ax, L_YAKkernel_95
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	309
	; >>>>> printTCB(tcb->next); 
	mov	si, word [bp-2]
	add	si, 8
	push	word [si]
	call	printTCB
	add	sp, 2
	jmp	L_YAKkernel_100
L_YAKkernel_99:
	; >>>>> Line:	312
	; >>>>> printString(" \n"); 
	mov	ax, L_YAKkernel_96
	push	ax
	call	printString
	add	sp, 2
L_YAKkernel_100:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_97:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_98
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKCurrentTask:
	TIMES	2 db 0
YKReadyTasks:
	TIMES	2 db 0
YKSuspendedTasks:
	TIMES	2 db 0
YKTCBs:
	TIMES	72 db 0
YKTCBMallocIndex:
	TIMES	2 db 0
IdleStack:
	TIMES	200 db 0
YKISRDepth:
	TIMES	2 db 0
YKIsRunning:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_app_2:
	DB	"Starting kernel...",0xA,0
L_app_1:
	DB	"Creating task...",0xA,0
	ALIGN	2
main:
	; >>>>> Line:	17
	; >>>>> { 
	jmp	L_app_3
L_app_4:
	; >>>>> Line:	18
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	20
	; >>>>> printString("Creating task...\n"); 
	mov	ax, L_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	21
	; >>>>> YKNewTask(Task, (void *) &TaskStack[ 256 ], 0); 
	xor	ax, ax
	push	ax
	mov	ax, (TaskStack+512)
	push	ax
	mov	ax, Task
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	23
	; >>>>> printString("Starting kernel...\n"); 
	mov	ax, L_app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_app_3:
	push	bp
	mov	bp, sp
	jmp	L_app_4
L_app_9:
	DB	" context switches! YKIdleCount is ",0
L_app_8:
	DB	"Task running after ",0
L_app_7:
	DB	"Delaying task...",0xA,0
L_app_6:
	DB	"Task started.",0xA,0
	ALIGN	2
Task:
	; >>>>> Line:	28
	; >>>>> { 
	jmp	L_app_10
L_app_11:
	; >>>>> Line:	32
	; >>>>> printString("Task started.\n"); 
	mov	ax, L_app_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> while (1) 
	jmp	L_app_13
L_app_12:
	; >>>>> Line:	35
	; >>>>> printString("Delaying task...\n"); 
	mov	ax, L_app_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	39
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	40
	; >>>>> numCtxSwitches = 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	41
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-2], ax
	; >>>>> Line:	42
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	43
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	45
	; >>>>> printString("Task running after "); 
	mov	ax, L_app_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printUInt(numCtxSwitches); 
	push	word [bp-4]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> printString(" context switches! YKIdleCount is "); 
	mov	ax, L_app_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> printUInt(idleCount); 
	push	word [bp-2]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	49
	; >>>>> printString(".\n"); 
	mov	ax, (L_app_1+15)
	push	ax
	call	printString
	add	sp, 2
L_app_13:
	jmp	L_app_12
L_app_14:
	mov	sp, bp
	pop	bp
	ret
L_app_10:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_app_11
	ALIGN	2
TaskStack:
	TIMES	512 db 0
