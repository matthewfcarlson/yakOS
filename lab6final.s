        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      ResetISR ; Reset               ; Int 08h (IRQ 0)
        dd      TickISR  ; Tick                ; Int 09h (IRQ 1)
        dd      KeyboardISR ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      SwitchTaskISR           ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84


TickISR:
	cli				;this is atomic so no more interrupts for a bit
	
	
	;TODO: create a function that pushes and pops context in the same way
	push ax
	push bx
	push dx
	push si
	push di
	push bp
	push es
	push ds
	
	mov	ax, word [YKISRDepth]
	test	ax, ax ;Not siure why ax,ax
	jne TickISRSaved
						;save the SP on the TCB since we are call depth zero
	mov si, word [YKCurrentTask]
	mov [si],sp			;move sp (the first variable) to the TCB
	TickISRSaved:
						
	call YKEnterISR		;enter the ISR
	sti 				;turn interupts back on
						;call the tick handler to handle the interrupt
	call YKTickHandler 

	cli 				; Turn off interrupts
						; Reset the PIC before we pop registers
	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)

	call YKExitISR		; exit the ISR	
	
	;Restore registers
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax	
	
	sti 	;return interrupts back on
	iret 	;return from interrupt
	
ResetISR:
	cli
	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)
	mov ax, 3h
	push ax
	call exit
	
KeyboardISR:
	cli
	push ax
	push bx
	push dx
	push si
	push di
	push bp
	push es
	push ds
	
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne KeyboardISRSaved
						;save the SP on the TCB since we are call depth zero
	mov si, word [YKCurrentTask]
	mov [si],sp			;move sp (the first variable) to the TCB
	KeyboardISRSaved:

	call YKEnterISR
	sti
	
	call KeyboardHandler

	cli
	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)
	call YKExitISR
	
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax
	sti
	
	iret

;ISR for the software generated interrupts
SwitchTaskISR:
	cli				;this is atomic so no more interrupts for a bit
	
	;TODO: create a function that pushes and pops context in the same way
	push ax
	push bx
	push dx
	push si
	push di
	push bp
	push es
	push ds
	
	;Save the current SP on the TCB
	mov si, word [YKCurrentTask]
	mov [si],sp			;move sp to the TCB

	mov	al, 0x20		; Load nonspecific EOI value (0x20) into register al
	out	0x20, al		; Write EOI to PIC (port 0x20)
	
	;Call the scheduler
	call YKScheduler
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax
	sti
	iret;
	
	
SaveSPtoTCB:	
						;Save the current SP on the TCB
	mov si, word [YKCurrentTask]
	mov ax, sp			;move sp to the ax
	add ax, 2h			;add 4. 2 for the call to EnterISR, 2 for the call to save SPtoTCB
	mov [si], ax		;move the SP to the TCB
	
	ret					;return
	

;This function is callewd by the dispatcher to swtich to the current task
SwitchContext:
	;we put the address we need in a local variable in YKDispatch
	mov sp, [bp-2] ;this is the stack pointer
	
	;This is not neccesary so commented out for performance boost
	;mov bp, sp ;set the basepointer accordingly - we are going to pop it soon
	;add bp, 18 ;for debugging purposes
	
	;next pop all the registers
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop bx
	pop ax
	
	;This will pop the next three items on the stack: IP, CS, and flags
	iret
	
; Generated by c86 (BYU-NASM) 5.1 (beta) from ISRHandlers.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKTickNum:
	DW	0
L_ISRHandlers_2:
	DB	"DELAY COMPLETE",0
L_ISRHandlers_1:
	DB	"DELAY KEY PRESSED",0
	ALIGN	2
KeyboardHandler:
	; >>>>> Line:	16
	; >>>>> void KeyboardHandler(void){ 
	jmp	L_ISRHandlers_3
L_ISRHandlers_4:
	; >>>>> Line:	18
	; >>>>> GlobalFlag = 1; 
	mov	word [GlobalFlag], 1
	; >>>>> Line:	19
	; >>>>> if(((char) KeyBuffer) == 'd'){ 
	cmp	byte [KeyBuffer], 100
	jne	L_ISRHandlers_5
	; >>>>> Line:	20
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	21
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_ISRHandlers_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	22
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	23
	; >>>>> for(i = 0; i < 5000; i++){} 
	mov	word [bp-2], 0
	jmp	L_ISRHandlers_7
L_ISRHandlers_6:
L_ISRHandlers_9:
	; >>>>> Line:	23
	; >>>>> for(i = 0; i < 5000; i++){} 
	inc	word [bp-2]
L_ISRHandlers_7:
	cmp	word [bp-2], 5000
	jl	L_ISRHandlers_6
L_ISRHandlers_8:
	; >>>>> Line:	24
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_ISRHandlers_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	25
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_ISRHandlers_10
L_ISRHandlers_5:
	; >>>>> Line:	27
	; >>>>> else if(((char) KeyBuffer) == 'l'){ 
	cmp	byte [KeyBuffer], 108
	jne	L_ISRHandlers_11
	; >>>>> Line:	28
	; >>>>> printTaskLists(); 
	call	printTaskLists
	jmp	L_ISRHandlers_12
L_ISRHandlers_11:
	; >>>>> Line:	30
	; >>>>> else if(((char) KeyBuffer) == 't'){ 
	cmp	byte [KeyBuffer], 116
	jne	L_ISRHandlers_13
	; >>>>> Line:	31
	; >>>>> YKTickHandler(); 
	call	YKTickHandler
L_ISRHandlers_13:
L_ISRHandlers_12:
L_ISRHandlers_10:
	mov	sp, bp
	pop	bp
	ret
L_ISRHandlers_3:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_ISRHandlers_4
	ALIGN	2
L_ISRHandlers_15:
	DW	0
L_ISRHandlers_16:
	DW	0
L_ISRHandlers_17:
	DB	"  TickISR: queue overflow! ",0xA,0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	45
	; >>>>> void YKTickHandler(){ 
	jmp	L_ISRHandlers_18
L_ISRHandlers_19:
	; >>>>> Line:	50
	; >>>>> ++YKTickNum; 
	inc	word [YKTickNum]
	; >>>>> Line:	57
	; >>>>> YKUpdateSuspendedTasks(); 
	call	YKUpdateSuspendedTasks
	; >>>>> Line:	60
	; >>>>> MsgArray[next].tick = YKTickNum; 
	mov	ax, word [L_ISRHandlers_15]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, MsgArray
	mov	ax, word [YKTickNum]
	mov	word [si], ax
	; >>>>> Line:	61
	; >>>>> data = (data + 89) % 100; 
	mov	ax, word [L_ISRHandlers_16]
	add	ax, 89
	cwd
	mov	cx, 100
	idiv	cx
	mov	ax, dx
	mov	word [L_ISRHandlers_16], ax
	; >>>>> Line:	62
	; >>>>> MsgArray[next].data = data; 
	mov	ax, word [L_ISRHandlers_15]
	shl	ax, 1
	shl	ax, 1
	add	ax, MsgArray
	mov	si, ax
	add	si, 2
	mov	ax, word [L_ISRHandlers_16]
	mov	word [si], ax
	; >>>>> Line:	63
	; >>>>> if (YKQPost(MsgQPtr, (void *) &(MsgArray[next])) == 0) 
	mov	ax, word [L_ISRHandlers_15]
	shl	ax, 1
	shl	ax, 1
	add	ax, MsgArray
	push	ax
	push	word [MsgQPtr]
	call	YKQPost
	add	sp, 4
	test	ax, ax
	jne	L_ISRHandlers_20
	; >>>>> Line:	64
	; >>>>> printString("  TickISR: queue overflow! \n"); 
	mov	ax, L_ISRHandlers_17
	push	ax
	call	printString
	add	sp, 2
	jmp	L_ISRHandlers_21
L_ISRHandlers_20:
	; >>>>> Line:	65
	; >>>>> else if (++next >=  20 ) 
	mov	ax, word [L_ISRHandlers_15]
	inc	ax
	mov	word [L_ISRHandlers_15], ax
	cmp	ax, 20
	jl	L_ISRHandlers_22
	; >>>>> Line:	66
	; >>>>> next = 0; 
	mov	word [L_ISRHandlers_15], 0
L_ISRHandlers_22:
L_ISRHandlers_21:
	mov	sp, bp
	pop	bp
	ret
L_ISRHandlers_18:
	push	bp
	mov	bp, sp
	jmp	L_ISRHandlers_19
; Generated by c86 (BYU-NASM) 5.1 (beta) from YAKkernel.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKSemaphoreIndex:
	DW	0
YKQueueIndex:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	67
	; >>>>> void YKInitialize(){ 
	jmp	L_YAKkernel_1
L_YAKkernel_2:
	; >>>>> Line:	68
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	71
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	72
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	73
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	74
	; >>>>> YKReadyTasks =  0 ; 
	mov	word [YKReadyTasks], 0
	; >>>>> Line:	75
	; >>>>> YKSuspendedTasks =  0 ; 
	mov	word [YKSuspendedTasks], 0
	; >>>>> Line:	77
	; >>>>> YKCurrentTask =  0 ; 
	mov	word [YKCurrentTask], 0
	; >>>>> Line:	78
	; >>>>> YKTCBMallocIndex = 0; 
	mov	word [YKTCBMallocIndex], 0
	; >>>>> Line:	79
	; >>>>> YKIsRunning = 0; 
	mov	word [YKIsRunning], 0
	; >>>>> Line:	82
	; >>>>> YKNewTask(YKIdleTask, &IdleStack[ 100 ],255); 
	mov	ax, 255
	push	ax
	mov	ax, (IdleStack+200)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	83
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_1:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_2
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	87
	; >>>>> void YKEnterMutex(){ 
	jmp	L_YAKkernel_4
L_YAKkernel_5:
	; >>>>> Line:	88
	; >>>>> asm("cli"); 
	cli
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_4:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_5
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	92
	; >>>>> SP; 
	jmp	L_YAKkernel_7
L_YAKkernel_8:
	; >>>>> Line:	93
	; >>>>> asm("sti"); 
	sti
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_7:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_8
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	97
	; >>>>> void YKEnterISR(){ 
	jmp	L_YAKkernel_10
L_YAKkernel_11:
	; >>>>> Line:	99
	; >>>>> ++YKISRDepth; 
	inc	word [YKISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_10:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_11
	ALIGN	2
YKExitISR:
	; >>>>> Line:	103
	; >>>>> void YKExitISR(){ 
	jmp	L_YAKkernel_13
L_YAKkernel_14:
	; >>>>> Line:	104
	; >>>>> --YKISRDepth; 
	dec	word [YKISRDepth]
	; >>>>> Line:	107
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_15
	; >>>>> Line:	109
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_YAKkernel_15:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_13:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_14
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	114
	; >>>>> void YKIdleTask(){ 
	jmp	L_YAKkernel_17
L_YAKkernel_18:
	; >>>>> Line:	116
	; >>>>> while(1){ 
	jmp	L_YAKkernel_20
L_YAKkernel_19:
	; >>>>> Line:	117
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	119
	; >>>>> ++YKIdleCount; 
	inc	word [YKIdleCount]
	; >>>>> Line:	120
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_YAKkernel_20:
	jmp	L_YAKkernel_19
L_YAKkernel_21:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_17:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_18
	ALIGN	2
YKNewTask:
	; >>>>> Line:	125
	; >>>>> void YKNewTask(void* taskFunc, void* taskStack, int priority){ 
	jmp	L_YAKkernel_23
L_YAKkernel_24:
	; >>>>> Line:	128
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKTCBMallocIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBs
	mov	word [bp-2], ax
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	; >>>>> Line:	128
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	129
	; >>>>> ++YKTCBMallocIndex; 
	inc	word [YKTCBMallocIndex]
	; >>>>> Line:	140
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	141
	; >>>>>  
	sub	word [bp-4], 2
	; >>>>> Line:	143
	; >>>>> *(newStackSP) =  64 ; 
	mov	si, word [bp-4]
	mov	word [si], 64
	; >>>>> Line:	144
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	145
	; >>>>> *(newStackSP) = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	146
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	147
	; >>>>> *(newStackSP) = (int)taskFunc; 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	148
	; >>>>> newStackSP = newStackSP - 5; 
	mov	ax, word [bp-4]
	sub	ax, 10
	mov	word [bp-4], ax
	; >>>>> Line:	149
	; >>>>> *(newStackSP) = (int)taskStack; 
	mov	si, word [bp-4]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	150
	; >>>>> --newStackSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	151
	; >>>>> newStackSP = newStackSP - 2; 
	mov	ax, word [bp-4]
	sub	ax, 4
	mov	word [bp-4], ax
	; >>>>> Line:	159
	; >>>>> newTask->stackPtr = (int*)newStackSP; 
	mov	si, word [bp-2]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	163
	; >>>>> newTask->priority = priority; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	164
	; >>>>> newTask->next =  0 ; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	165
	; >>>>> newTask->prev =  0 ; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	166
	; >>>>> newTask->delayTicks = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	167
	; >>>>> newTask->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	169
	; >>>>> YKAddToReadyList(newTask); 
	push	word [bp-2]
	call	YKAddToReadyList
	add	sp, 2
	; >>>>> Line:	170
	; >>>>> if (YKIsRunning &&  
	mov	ax, word [YKIsRunning]
	test	ax, ax
	je	L_YAKkernel_25
	mov	ax, word [YKCurrentTask]
	test	ax, ax
	jne	L_YAKkernel_25
	; >>>>> Line:	171
	; >>>>> YKScheduler(); 
	call	YKScheduler
	jmp	L_YAKkernel_26
L_YAKkernel_25:
	; >>>>> Line:	172
	; >>>>> else if (YKIsRunning) 
	mov	ax, word [YKIsRunning]
	test	ax, ax
	je	L_YAKkernel_27
	; >>>>> Line:	173
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_27:
L_YAKkernel_26:
	; >>>>> Line:	175
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_23:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_24
	ALIGN	2
YKRun:
	; >>>>> Line:	178
	; >>>>> void YKRun(){ 
	jmp	L_YAKkernel_29
L_YAKkernel_30:
	; >>>>> Line:	182
	; >>>>> YKIsRunning = 1; 
	mov	word [YKIsRunning], 1
	; >>>>> Line:	183
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_29:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_30
	ALIGN	2
YKScheduler:
	; >>>>> Line:	188
	; >>>>> void YKScheduler(){ 
	jmp	L_YAKkernel_32
L_YAKkernel_33:
	; >>>>> Line:	189
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	190
	; >>>>> if (!YKIsRunning) return; 
	mov	ax, word [YKIsRunning]
	test	ax, ax
	jne	L_YAKkernel_34
	; >>>>> Line:	190
	; >>>>> if (!YKIsRunning) return; 
	jmp	L_YAKkernel_35
L_YAKkernel_34:
	; >>>>> Line:	192
	; >>>>> if (YKReadyTasks != YKCurrentTask){ 
	mov	ax, word [YKCurrentTask]
	cmp	ax, word [YKReadyTasks]
	je	L_YAKkernel_36
	; >>>>> Line:	197
	; >>>>> YKCurrentTask = YKReadyTasks; 
	mov	ax, word [YKReadyTasks]
	mov	word [YKCurrentTask], ax
	; >>>>> Line:	198
	; >>>>> ++YKCtxSwCount; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	204
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
L_YAKkernel_36:
L_YAKkernel_35:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_32:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_33
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	211
	; >>>>> void YKDispatcher(){ 
	jmp	L_YAKkernel_38
L_YAKkernel_39:
	; >>>>> Line:	215
	; >>>>> SwitchContext(); 
	mov	si, word [YKCurrentTask]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	215
	; >>>>> SwitchContext(); 
	call	SwitchContext
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_38:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_39
	ALIGN	2
YKAddToReadyList:
	; >>>>> Line:	221
	; >>>>> void YKAddToReadyList(TCBp newTask){ 
	jmp	L_YAKkernel_41
L_YAKkernel_42:
	; >>>>> Line:	225
	; >>>>> if (YKReadyTasks ==  0 ){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
	mov	ax, word [YKReadyTasks]
	mov	word [bp-4], ax
	; >>>>> Line:	225
	; >>>>> if (YKReadyTasks ==  0 ){ 
	mov	ax, word [YKReadyTasks]
	test	ax, ax
	jne	L_YAKkernel_43
	; >>>>> Line:	226
	; >>>>> YKReadyTasks = newTask; 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_44
L_YAKkernel_43:
	; >>>>> Line:	229
	; >>>>> else if (YKReadyTasks->priority > newPriority){ 
	mov	si, word [YKReadyTasks]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jge	L_YAKkernel_45
	; >>>>> Line:	230
	; >>>>> newTask->next = YKReadyTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKReadyTasks]
	mov	word [si], ax
	; >>>>> Line:	231
	; >>>>> YKReadyTasks->prev = newTask; 
	mov	si, word [YKReadyTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	232
	; >>>>> YKReadyTasks = newTask; 
	mov	ax, word [bp+4]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_46
L_YAKkernel_45:
	; >>>>> Line:	236
	; >>>>> while (taskListPtr->next !=  0  && taskListPtr->priority < newPriority 
	jmp	L_YAKkernel_48
L_YAKkernel_47:
	; >>>>> Line:	237
	; >>>>> taskListPtr = taskListPtr->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_YAKkernel_48:
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_50
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jg	L_YAKkernel_47
L_YAKkernel_50:
L_YAKkernel_49:
	; >>>>> Line:	240
	; >>>>> if (taskListPtr->priority < newPriority){ 
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jle	L_YAKkernel_51
	; >>>>> Line:	241
	; >>>>> newTask->next = taskListPtr->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	242
	; >>>>> taskListPtr->next = newTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	243
	; >>>>> newTask->prev = taskListPtr; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	244
	; >>>>> if (newTask->next !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_52
	; >>>>> Line:	245
	; >>>>> newTask->next->prev = newTask; 
	mov	si, word [bp+4]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
L_YAKkernel_52:
	jmp	L_YAKkernel_53
L_YAKkernel_51:
	; >>>>> Line:	250
	; >>>>> newTask->prev = taskListPtr->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	251
	; >>>>> if (taskListPtr->prev !=  0 ) 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_54
	; >>>>> Line:	252
	; >>>>> taskListPtr->prev->next = newTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
L_YAKkernel_54:
	; >>>>> Line:	253
	; >>>>> taskListPtr->prev = newTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	254
	; >>>>> newTask->next = taskListPtr; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_YAKkernel_53:
L_YAKkernel_46:
L_YAKkernel_44:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_41:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_42
	ALIGN	2
YKAddToSuspendedList:
	; >>>>> Line:	259
	; >>>>> void YKAddToSuspendedList(TCBp task){ 
	jmp	L_YAKkernel_56
L_YAKkernel_57:
	; >>>>> Line:	261
	; >>>>> if (YKSuspended 
	mov	ax, word [YKSuspendedTasks]
	test	ax, ax
	jne	L_YAKkernel_58
	; >>>>> Line:	262
	; >>>>> YKSuspendedTasks = task; 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
	; >>>>> Line:	263
	; >>>>> task->next =  0 ; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	264
	; >>>>> task->next =  0 ; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_YAKkernel_59
L_YAKkernel_58:
	; >>>>> Line:	267
	; >>>>> task->prev =  0 ; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	268
	; >>>>> task->next = YKSuspendedTasks; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [YKSuspendedTasks]
	mov	word [si], ax
	; >>>>> Line:	269
	; >>>>> YKSuspendedTasks->prev = task; 
	mov	si, word [YKSuspendedTasks]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	270
	; >>>>> YKSuspendedTasks = task; 
	mov	ax, word [bp+4]
	mov	word [YKSuspendedTasks], ax
L_YAKkernel_59:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_56:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_57
	ALIGN	2
YKRemoveFromList:
	; >>>>> Line:	277
	; >>>>> void YKRemoveFromList(TCBp task){ 
	jmp	L_YAKkernel_61
L_YAKkernel_62:
	; >>>>> Line:	279
	; >>>>> if (YKReadyTasks == task){ 
	mov	ax, word [bp+4]
	cmp	ax, word [YKReadyTasks]
	jne	L_YAKkernel_63
	; >>>>> Line:	280
	; >>>>> YKReadyTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKReadyTasks], ax
	jmp	L_YAKkernel_64
L_YAKkernel_63:
	; >>>>> Line:	282
	; >>>>> else if (YKSuspendedTasks == task){ 
	mov	ax, word [bp+4]
	cmp	ax, word [YKSuspendedTasks]
	jne	L_YAKkernel_65
	; >>>>> Line:	283
	; >>>>> YKSuspendedTasks = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspendedTasks], ax
L_YAKkernel_65:
L_YAKkernel_64:
	; >>>>> Line:	286
	; >>>>> if (task->next !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_66
	; >>>>> Line:	287
	; >>>>> task->next->prev = task->prev; 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_66:
	; >>>>> Line:	289
	; >>>>> if (task->prev !=  0 ){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_67
	; >>>>> Line:	290
	; >>>>> task->prev->next = task->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_YAKkernel_67:
	; >>>>> Line:	293
	; >>>>> task- 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	294
	; >>>>> task->next =  0 ; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_61:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_62
	ALIGN	2
YKUpdateSuspendedTasks:
	; >>>>> Line:	299
	; >>>>> void YKUpdateSuspendedTasks(){ 
	jmp	L_YAKkernel_69
L_YAKkernel_70:
	; >>>>> Line:	304
	; >>>>> while (currTCB !=  0 ){ 
	mov	ax, word [YKSuspendedTasks]
	mov	word [bp-2], ax
	mov	word [bp-4], 0
	; >>>>> Line:	304
	; >>>>> while (currTCB !=  0 ){ 
	jmp	L_YAKkernel_72
L_YAKkernel_71:
	; >>>>> Line:	305
	; >>>>> currTCB->delayTicks = currTCB->delayTicks -1 ; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	307
	; >>>>> if (currTCB->delayTicks <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_YAKkernel_74
	; >>>>> Line:	316
	; >>>>> movingTCB = currTCB; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	317
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	318
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	319
	; >>>>> YKRemoveFromList(movingTCB); 
	push	word [bp-4]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	320
	; >>>>> YKAddToReadyList(movingTCB); 
	push	word [bp-4]
	call	YKAddToReadyList
	add	sp, 2
	; >>>>> Line:	321
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	jmp	L_YAKkernel_75
L_YAKkernel_74:
	; >>>>> Line:	324
	; >>>>> currTCB = currTCB->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_YAKkernel_75:
L_YAKkernel_72:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_YAKkernel_71
L_YAKkernel_73:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_69:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_70
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	332
	; >>>>> void YKDelayTask(int ticks){ 
	jmp	L_YAKkernel_77
L_YAKkernel_78:
	; >>>>> Line:	333
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	334
	; >>>>> if (ticks > 0){ 
	cmp	word [bp+4], 0
	jle	L_YAKkernel_79
	; >>>>> Line:	342
	; >>>>> YKCurrentTask->delayTicks += ticks; 
	mov	si, word [YKCurrentTask]
	add	si, 6
	mov	ax, word [bp+4]
	add	word [si], ax
L_YAKkernel_79:
	; >>>>> Line:	345
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	346
	; >>>>> YKAddToSuspendedList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKAddToSuspendedList
	add	sp, 2
	; >>>>> Line:	349
	; >>>>> asm("int 11h"); 
	int 11h
	; >>>>> Line:	351
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_77:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_78
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	355
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_YAKkernel_81
L_YAKkernel_82:
	; >>>>> Line:	357
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKSemaphoreIndex]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSemaphores
	mov	word [bp-2], ax
	; >>>>> Line:	357
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	358
	; >>>>> newSem->count = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	359
	; >>>>> newSem->tasks =  0 ; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	360
	; >>>>> ++YKSemaphoreIndex; 
	inc	word [YKSemaphoreIndex]
	; >>>>> Line:	368
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	369
	; >>>>> return newSem; 
	mov	ax, word [bp-2]
L_YAKkernel_83:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_81:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_82
	ALIGN	2
YKSemPend:
	; >>>>> Line:	371
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_YAKkernel_85
L_YAKkernel_86:
	; >>>>> Line:	372
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	379
	; >>>>> if (semaphore->count > 0){ 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_YAKkernel_87
	; >>>>> Line:	380
	; >>>>> --(semaphore->count); 
	dec	word [si]
	; >>>>> Line:	381
	; >>>>> return; 
	jmp	L_YAKkernel_88
L_YAKkernel_87:
	; >>>>> Line:	387
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	388
	; >>>>> YKCurrentTask->next = semaphore->tasks; 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [YKCurrentTask]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	389
	; >>>>> semaphore->tasks = YKCurrentTask; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [YKCurrentTask]
	mov	word [si], ax
	; >>>>> Line:	392
	; >>>>> if (YKISRDepth == 0) 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_89
	; >>>>> Line:	393
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_89:
	; >>>>> Line:	395
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_YAKkernel_88:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_85:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_86
	ALIGN	2
YKSemPost:
	; >>>>> Line:	398
	; >>>>> void YKSemPost(YK 
	jmp	L_YAKkernel_91
L_YAKkernel_92:
	; >>>>> Line:	401
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	409
	; >>>>> ++(semaphore->count); 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	411
	; >>>>> currTask = semaphore->tasks; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	412
	; >>>>> if (currTask !=  0 ) 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_YAKkernel_93
	; >>>>> Line:	413
	; >>>>> --(semaphore->count); 
	mov	si, word [bp+4]
	dec	word [si]
L_YAKkernel_93:
	; >>>>> Line:	415
	; >>>>> while (currTask !=  0  && currTask != currTask->next){ 
	jmp	L_YAKkernel_95
L_YAKkernel_94:
	; >>>>> Line:	416
	; >>>>> addTask = currTask; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	417
	; >>>>> currTask = currTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	418
	; >>>>> YKAddToReadyList(addTask); 
	push	word [bp-4]
	call	YKAddToReadyList
	add	sp, 2
L_YAKkernel_95:
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_YAKkernel_97
	mov	si, word [bp-2]
	add	si, 8
	cmp	ax, word [si]
	jne	L_YAKkernel_94
L_YAKkernel_97:
L_YAKkernel_96:
	; >>>>> Line:	420
	; >>>>> semaphore->tasks =  0 ; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	421
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_98
	; >>>>> Line:	422
	; >>>>> asm("int 11h"); 
	int 11h
L_YAKkernel_98:
	; >>>>> Line:	424
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_91:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_92
	ALIGN	2
YKQCreate:
	; >>>>> Line:	432
	; >>>>> YKQ* YKQCreate(void **start, unsigned size){ 
	jmp	L_YAKkernel_100
L_YAKkernel_101:
	; >>>>> Line:	434
	; >>>>> YKEnterMutex(); 
	mov	ax, word [YKQueueIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKQueues
	mov	word [bp-2], ax
	; >>>>> Line:	434
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	435
	; >>>>> queue->head = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
	; >>>>> Line:	436
	; >>>>> queue->tail = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	437
	; >>>>> queue->size = size; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	438
	; >>>>> queue->length = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	439
	; >>>>> queue->queue = start; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> ++YKQueueIndex; 
	inc	word [YKQueueIndex]
	; >>>>> Line:	441
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	442
	; >>>>> return (void*)queue; 
	mov	ax, word [bp-2]
L_YAKkernel_102:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_100:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_101
L_YAKkernel_104:
	DB	0xA,0xA,"ERROR: CANNOT SWITCH TASK SINCE IN ISR------------------------",0xA,0xA,0
	ALIGN	2
YKQPend:
	; >>>>> Line:	444
	; >>>>> void* YKQPend(YKQ *queue){ 
	jmp	L_YAKkernel_105
L_YAKkernel_106:
	; >>>>> Line:	453
	; >>>>> YKEnterMutex(); 
	mov	ax, word [bp+4]
	mov	word [bp-4], ax
	; >>>>> Line:	453
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	454
	; >>>>> if (messQ->length == 0){ 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_YAKkernel_107
	; >>>>> Line:	458
	; >>>>> YKRemoveFromList(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	YKRemoveFromList
	add	sp, 2
	; >>>>> Line:	459
	; >>>>> YKCurrentTask->next = messQ->tasks; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [YKCurrentTask]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	460
	; >>>>> messQ->tasks = YKCurrentTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [YKCurrentTask]
	mov	word [si], ax
	; >>>>> Line:	461
	; >>>>> if (YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_YAKkernel_108
	; >>>>> Line:	462
	; >>>>> asm("int 11h"); 
	int 11h
	jmp	L_YAKkernel_109
L_YAKkernel_108:
	; >>>>> Line:	465
	; >>>>> printString("\n\nERROR: CANNOT SWITCH TASK SINCE IN ISR------------------------\n\n"); 
	mov	ax, L_YAKkernel_104
	push	ax
	call	printString
	add	sp, 2
L_YAKkernel_109:
L_YAKkernel_107:
	; >>>>> Line:	468
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	470
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	473
	; >>>>> messQ->length = messQ->length - 1; 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-4]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	475
	; >>>>> message = messQ->queue[messQ->head]; 
	mov	si, word [bp-4]
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-4]
	add	di, 8
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	476
	; >>>>> ++(messQ->head); 
	mov	si, word [bp-4]
	inc	word [si]
	; >>>>> Line:	477
	; >>>>> if (messQ->head == messQ->size ) 
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_YAKkernel_110
	; >>>>> Line:	478
	; >>>>> messQ->head = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
L_YAKkernel_110:
	; >>>>> Line:	487
	; >>>>> return message; 
	mov	ax, word [bp-2]
L_YAKkernel_111:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_105:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_YAKkernel_106
	ALIGN	2
YKQPost:
	; >>>>> Line:	490
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_YAKkernel_113
L_YAKkernel_114:
	; >>>>> Line:	494
	; >>>>> YKEnterMutex(); 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	494
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	502
	; >>>>> if (messQ->length >= messQ->size){ 
	mov	si, word [bp-2]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_YAKkernel_115
	; >>>>> Line:	506
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_YAKkernel_116
L_YAKkernel_115:
	; >>>>> Line:	508
	; >>>>> ++(messQ->length); 
	mov	si, word [bp-2]
	add	si, 6
	inc	word [si]
	; >>>>> Line:	509
	; >>>>> messQ->queue[messQ->tail] = msg; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	di, 8
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	511
	; >>>>> ++(messQ->tail); 
	mov	si, word [bp-2]
	add	si, 2
	inc	word [si]
	; >>>>> Line:	512
	; >>>>> if (messQ->tail == messQ->size ) 
	mov	si, word [bp-2]
	add	si, 2
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_YAKkernel_117
	; >>>>> Line:	513
	; >>>>> messQ->tail = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
L_YAKkernel_117:
	; >>>>> Line:	516
	; >>>>> currTask = messQ->tasks; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	517
	; >>>>> while (currTask !=  0  && currTask != currTask->next){ 
	jmp	L_YAKkernel_119
L_YAKkernel_118:
	; >>>>> Line:	518
	; >>>>> addTask = currTask; 
	mov	ax, word [bp-4]
	mov	word [bp-6], ax
	; >>>>> Line:	519
	; >>>>> currTask = currTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	520
	; >>>>> YKAddToReadyList(addTask); 
	push	word [bp-6]
	call	YKAddToReadyList
	add	sp, 2
L_YAKkernel_119:
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_YAKkernel_121
	mov	si, word [bp-4]
	add	si, 8
	cmp	ax, word [si]
	jne	L_YAKkernel_118
L_YAKkernel_121:
L_YAKkernel_120:
	; >>>>> Line:	523
	; >>>>> messQ->tasks =  0 ; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	525
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	526
	; >>>>> return 5; 
	mov	ax, 5
L_YAKkernel_116:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_113:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_YAKkernel_114
	ALIGN	2
printCurrentTask:
	; >>>>> Line:	530
	; >>>>> void printCurrentTask(){ 
	jmp	L_YAKkernel_123
L_YAKkernel_124:
	; >>>>> Line:	531
	; >>>>> printTCB(YKCurrentTask); 
	push	word [YKCurrentTask]
	call	printTCB
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_123:
	push	bp
	mov	bp, sp
	jmp	L_YAKkernel_124
L_YAKkernel_133:
	DB	"]",0xA,0
L_YAKkernel_132:
	DB	", ",0
L_YAKkernel_131:
	DB	"Contents: [",0
L_YAKkernel_130:
	DB	" tasks:",0
L_YAKkernel_129:
	DB	" t:",0
L_YAKkernel_128:
	DB	" h:",0
L_YAKkernel_127:
	DB	" count:",0
L_YAKkernel_126:
	DB	"Queue size:",0
	ALIGN	2
printQueue:
	; >>>>> Line:	534
	; >>>>> void printQueue(YKMQ* queue){ 
	jmp	L_YAKkernel_134
L_YAKkernel_135:
	; >>>>> Line:	536
	; >>>>> printString("Queue size:"); 
	mov	word [bp-2], 0
	; >>>>> Line:	536
	; >>>>> printString("Queue size:"); 
	mov	ax, L_YAKkernel_126
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	537
	; >>>>> printInt(queue->size); 
	mov	si, word [bp+4]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	538
	; >>>>> printString(" count:"); 
	mov	ax, L_YAKkernel_127
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	539
	; >>>>> printInt(queue->length); 
	mov	si, word [bp+4]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	540
	; >>>>> printString(" h:"); 
	mov	ax, L_YAKkernel_128
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	541
	; >>>>> printInt(queue->head); 
	mov	si, word [bp+4]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	542
	; >>>>> printString(" t:"); 
	mov	ax, L_YAKkernel_129
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	543
	; >>>>> printInt(queue->tail); 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	544
	; >>>>> printString(" tasks:"); 
	mov	ax, L_YAKkernel_130
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	545
	; >>>>> t); 
	mov	si, word [bp+4]
	add	si, 10
	push	word [si]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	546
	; >>>>> printString("Contents: ["); 
	mov	ax, L_YAKkernel_131
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	547
	; >>>>> for (i=0;i<queue->size;i++){ 
	mov	word [bp-2], 0
	jmp	L_YAKkernel_137
L_YAKkernel_136:
	; >>>>> Line:	548
	; >>>>> printWord((int)queue->queue[i]); 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 8
	add	si, word [di]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	549
	; >>>>> printString(", "); 
	mov	ax, L_YAKkernel_132
	push	ax
	call	printString
	add	sp, 2
L_YAKkernel_139:
	inc	word [bp-2]
L_YAKkernel_137:
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jb	L_YAKkernel_136
L_YAKkernel_138:
	; >>>>> Line:	551
	; >>>>> printString("]\n"); 
	mov	ax, L_YAKkernel_133
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_134:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_135
L_YAKkernel_147:
	DB	" ",0xA,0
L_YAKkernel_146:
	DB	"->",0
L_YAKkernel_145:
	DB	")",0
L_YAKkernel_144:
	DB	":0x",0
L_YAKkernel_143:
	DB	"/",0
L_YAKkernel_142:
	DB	"TCB(",0
L_YAKkernel_141:
	DB	"None",0xA,0
	ALIGN	2
printTCB:
	; >>>>> Line:	554
	; >>>>> void printTCB(void* ptcb){ 
	jmp	L_YAKkernel_148
L_YAKkernel_149:
	; >>>>> Line:	557
	; >>>>> if (ptcb ==  0 ){ 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	557
	; >>>>> if (ptcb ==  0 ){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_YAKkernel_150
	; >>>>> Line:	558
	; >>>>> printString("None\n"); 
	mov	ax, L_YAKkernel_141
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	559
	; >>>>> return; 
	jmp	L_YAKkernel_151
L_YAKkernel_150:
	; >>>>> Line:	563
	; >>>>> printString("TCB("); 
	mov	ax, L_YAKkernel_142
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	564
	; >>>>> printInt(tcb->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	565
	; >>>>> printString("/"); 
	mov	ax, L_YAKkernel_143
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	566
	; >>>>> printInt(tcb->delayTicks); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	567
	; >>>>> printString(":0x"); 
	mov	ax, L_YAKkernel_144
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	568
	; >>>>> printWord((int)tcb->stackPtr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	569
	; >>>>> printString(")"); 
	mov	ax, L_YAKkernel_145
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	570
	; >>>>> if (tcb->next !=  0 ){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_YAKkernel_152
	; >>>>> Line:	571
	; >>>>> printString("->"); 
	mov	ax, L_YAKkernel_146
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	572
	; >>>>> printTCB(tcb->next); 
	mov	si, word [bp-2]
	add	si, 8
	push	word [si]
	call	printTCB
	add	sp, 2
	jmp	L_YAKkernel_153
L_YAKkernel_152:
	; >>>>> Line:	575
	; >>>>> printString(" \n"); 
	mov	ax, L_YAKkernel_147
	push	ax
	call	printString
	add	sp, 2
L_YAKkernel_153:
L_YAKkernel_151:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_148:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_149
L_YAKkernel_157:
	DB	"Semaphore #",0
L_YAKkernel_156:
	DB	"Suspended Tasks:  ",0
L_YAKkernel_155:
	DB	"Ready Tasks:  ",0
	ALIGN	2
printTaskLists:
	; >>>>> Line:	577
	; >>>>> void printTaskLists(){ 
	jmp	L_YAKkernel_158
L_YAKkernel_159:
	; >>>>> Line:	579
	; >>>>> printString("Ready Tasks:  "); 
	mov	word [bp-2], 0
	; >>>>> Line:	579
	; >>>>> printString("Ready Tasks:  "); 
	mov	ax, L_YAKkernel_155
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	580
	; >>>>> printTCB(YKReadyTasks); 
	push	word [YKReadyTasks]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	581
	; >>>>> printString("Suspended Tasks:  "); 
	mov	ax, L_YAKkernel_156
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	582
	; >>>>> printTCB(YKSuspendedTasks); 
	push	word [YKSuspendedTasks]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	583
	; >>>>> for (i=0; i< YKSemaphoreIndex;i++){ 
	mov	word [bp-2], 0
	jmp	L_YAKkernel_161
L_YAKkernel_160:
	; >>>>> Line:	584
	; >>>>> printString("Semaphore #"); 
	mov	ax, L_YAKkernel_157
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	585
	; >>>>> printInt(i); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	586
	; >>>>> printString(" tasks:"); 
	mov	ax, L_YAKkernel_130
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	587
	; >>>>> printTCB(YKSemaphores[i].tasks); 
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSemaphores
	mov	si, ax
	add	si, 2
	push	word [si]
	call	printTCB
	add	sp, 2
L_YAKkernel_163:
	inc	word [bp-2]
L_YAKkernel_161:
	mov	ax, word [YKSemaphoreIndex]
	cmp	ax, word [bp-2]
	jg	L_YAKkernel_160
L_YAKkernel_162:
	mov	sp, bp
	pop	bp
	ret
L_YAKkernel_158:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_YAKkernel_159
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKCurrentTask:
	TIMES	2 db 0
YKReadyTasks:
	TIMES	2 db 0
YKSuspendedTasks:
	TIMES	2 db 0
YKTCBs:
	TIMES	72 db 0
YKTCBMallocIndex:
	TIMES	2 db 0
YKSemaphores:
	TIMES	20 db 0
IdleStack:
	TIMES	200 db 0
YKQueues:
	TIMES	60 db 0
YKISRDepth:
	TIMES	2 db 0
YKIsRunning:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_app_5:
	DB	"Max: ",0
L_app_4:
	DB	"Min: ",0
L_app_3:
	DB	0x9,0
L_app_2:
	DB	"Ticks: ",0
L_app_1:
	DB	"! Dropped msgs: tick ",0
	ALIGN	2
ATask:
	; >>>>> Line:	26
	; >>>>> { 
	jmp	L_app_6
L_app_7:
	; >>>>> Line:	30
	; >>>>> min = 100; 
	mov	word [bp-4], 100
	; >>>>> Line:	31
	; >>>>> max = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	32
	; >>>>> count = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	34
	; >>>>> while (1) 
	jmp	L_app_9
L_app_8:
	; >>>>> Line:	36
	; >>>>> tmp = (struct msg *) YKQPend(MsgQPtr); 
	push	word [MsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	39
	; >>>>> if (tmp->tick != count+1) 
	mov	ax, word [bp-8]
	inc	ax
	mov	si, word [bp-2]
	mov	dx, word [si]
	cmp	dx, ax
	je	L_app_11
	; >>>>> Line:	41
	; >>>>> print("! Dropped msgs: tick ", 21); 
	mov	ax, 21
	push	ax
	mov	ax, L_app_1
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	42
	; >>>>> if (tmp->tick - (count+1) > 1) { 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, word [bp-8]
	dec	ax
	cmp	ax, 1
	jle	L_app_12
	; >>>>> Line:	43
	; >>>>> printInt(count+1); 
	mov	ax, word [bp-8]
	inc	ax
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> printChar('-'); 
	mov	al, 45
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	45
	; >>>>> printInt(tmp->tick-1); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	dec	ax
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_app_13
L_app_12:
	; >>>>> Line:	49
	; >>>>> printInt(tmp->tick-1); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	dec	ax
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	50
	; >>>>> printNewLine(); 
	call	printNewLine
L_app_13:
L_app_11:
	; >>>>> Line:	55
	; >>>>> count = tmp->tick; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	58
	; >>>>> if (tmp->data < min) 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp-4]
	cmp	ax, word [si]
	jle	L_app_14
	; >>>>> Line:	59
	; >>>>> min = tmp->data; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-4], ax
L_app_14:
	; >>>>> Line:	60
	; >>>>> if (tmp->data > max) 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp-6]
	cmp	ax, word [si]
	jge	L_app_15
	; >>>>> Line:	61
	; >>>>> max = tmp->data; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
L_app_15:
	; >>>>> Line:	64
	; >>>>> print("Ticks: ", 7); 
	mov	ax, 7
	push	ax
	mov	ax, L_app_2
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	65
	; >>>>> printInt(count); 
	push	word [bp-8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	66
	; >>>>> print("\t", 1); 
	mov	ax, 1
	push	ax
	mov	ax, L_app_3
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	67
	; >>>>> print("Min: ", 5); 
	mov	ax, 5
	push	ax
	mov	ax, L_app_4
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	68
	; >>>>> printInt(min); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	69
	; >>>>> print("\t", 1); 
	mov	ax, 1
	push	ax
	mov	ax, L_app_3
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	70
	; >>>>> print("Max: ", 5); 
	mov	ax, 5
	push	ax
	mov	ax, L_app_5
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	71
	; >>>>> printInt(max); 
	push	word [bp-6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	72
	; >>>>> printNewLine(); 
	call	printNewLine
L_app_9:
	jmp	L_app_8
L_app_10:
	mov	sp, bp
	pop	bp
	ret
L_app_6:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_app_7
	ALIGN	2
BTask:
	; >>>>> Line:	77
	; >>>>> { 
	jmp	L_app_17
L_app_18:
	; >>>>> Line:	81
	; >>>>> curval = 1001; 
	mov	word [bp-4], 1001
	; >>>>> Line:	82
	; >>>>> chcount = 0; 
	mov	word [bp-10], 0
	; >>>>> Line:	84
	; >>>>> while (1) 
	jmp	L_app_20
L_app_19:
	; >>>>> Line:	86
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	88
	; >>>>> if (GlobalFlag == 1) 
	cmp	word [GlobalFlag], 1
	jne	L_app_22
	; >>>>> Line:	90
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	91
	; >>>>> busycount = YKTickNum; 
	mov	ax, word [YKTickNum]
	mov	word [bp-2], ax
	; >>>>> Line:	92
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	94
	; >>>>> while (1) 
	jmp	L_app_24
L_app_23:
	; >>>>> Line:	96
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	97
	; >>>>> tickNum = YKTickNum; 
	mov	ax, word [YKTickNum]
	mov	word [bp-12], ax
	; >>>>> Line:	98
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	99
	; >>>>> if(tickNum >= busycount + 5) break; 
	mov	ax, word [bp-2]
	add	ax, 5
	mov	dx, word [bp-12]
	cmp	dx, ax
	jb	L_app_26
	; >>>>> Line:	99
	; >>>>> if(tickNum >= busycount + 5) break; 
	jmp	L_app_25
L_app_26:
	; >>>>> Line:	101
	; >>>>> curval += 2; 
	add	word [bp-4], 2
	; >>>>> Line:	102
	; >>>>> flag = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	103
	; >>>>> for (j = 3; (j*j) < curval; j += 2) 
	mov	word [bp-6], 3
	jmp	L_app_28
L_app_27:
	; >>>>> Line:	105
	; >>>>> if (curval % j == 0) 
	mov	ax, word [bp-4]
	cwd
	idiv	word [bp-6]
	mov	ax, dx
	test	ax, ax
	jne	L_app_31
	; >>>>> Line:	107
	; >>>>> flag = 1; 
	mov	word [bp-8], 1
	; >>>>> Line:	108
	; >>>>> break; 
	jmp	L_app_29
L_app_31:
L_app_30:
	add	word [bp-6], 2
L_app_28:
	mov	ax, word [bp-6]
	imul	word [bp-6]
	mov	dx, word [bp-4]
	cmp	dx, ax
	jg	L_app_27
L_app_29:
	; >>>>> Line:	111
	; >>>>> if (!flag) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_app_32
	; >>>>> Line:	113
	; >>>>> printChar('.'); 
	mov	al, 46
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	114
	; >>>>> if (++chcount > 75) 
	mov	ax, word [bp-10]
	inc	ax
	mov	word [bp-10], ax
	cmp	ax, 75
	jle	L_app_33
	; >>>>> Line:	116
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	117
	; >>>>> chcount = 0; 
	mov	word [bp-10], 0
L_app_33:
L_app_32:
L_app_24:
	jmp	L_app_23
L_app_25:
	; >>>>> Line:	121
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	122
	; >>>>> chcount = 0; 
	mov	word [bp-10], 0
	; >>>>> Line:	123
	; >>>>> GlobalFlag = 0; 
	mov	word [GlobalFlag], 0
L_app_22:
L_app_20:
	jmp	L_app_19
L_app_21:
	mov	sp, bp
	pop	bp
	ret
L_app_17:
	push	bp
	mov	bp, sp
	sub	sp, 12
	jmp	L_app_18
L_app_39:
	DB	"% >>>>>",0xD,0xA,0
L_app_38:
	DB	", CPU usage: ",0
L_app_37:
	DB	"<<<<< Context switches: ",0
L_app_36:
	DB	"Determining CPU capacity",0xD,0xA,0
L_app_35:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	129
	; >>>>> { 
	jmp	L_app_40
L_app_41:
	; >>>>> Line:	133
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_app_35
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_app_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	138
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	139
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	140
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	142
	; >>>>> YKNewTask(BTask, (void *) &BTaskStk[ 512 ], 10); 
	mov	ax, 10
	push	ax
	mov	ax, (BTaskStk+1024)
	push	ax
	mov	ax, BTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	143
	; >>>>> YKNewTask(ATask, (void * 
	mov	ax, 20
	push	ax
	mov	ax, (ATaskStk+1024)
	push	ax
	mov	ax, ATask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	145
	; >>>>> while (1) 
	jmp	L_app_43
L_app_42:
	; >>>>> Line:	147
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	149
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	150
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	151
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	152
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	154
	; >>>>> printString("<<<<< Context switches: "); 
	mov	ax, L_app_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	155
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	156
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_app_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	157
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	158
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_app_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	161
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	162
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	163
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	164
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_app_43:
	jmp	L_app_42
L_app_44:
	mov	sp, bp
	pop	bp
	ret
L_app_40:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_app_41
	ALIGN	2
main:
	; >>>>> Line:	169
	; >>>>> { 
	jmp	L_app_46
L_app_47:
	; >>>>> Line:	170
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	173
	; >>>>> GlobalFlag = 0; 
	mov	word [GlobalFlag], 0
	; >>>>> Line:	174
	; >>>>> MsgQPtr = YKQCreate(MsgQ,  10 ); 
	mov	ax, 10
	push	ax
	mov	ax, MsgQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [MsgQPtr], ax
	; >>>>> Line:	175
	; >>>>> YKNewTask(STask, (void *) &STaskStk[ 512 ], 30); 
	mov	ax, 30
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	177
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_app_46:
	push	bp
	mov	bp, sp
	jmp	L_app_47
	ALIGN	2
MsgArray:
	TIMES	80 db 0
ATaskStk:
	TIMES	1024 db 0
BTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
GlobalFlag:
	TIMES	2 db 0
MsgQ:
	TIMES	20 db 0
MsgQPtr:
	TIMES	2 db 0
